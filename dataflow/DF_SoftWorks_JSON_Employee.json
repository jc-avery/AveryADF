{
	"name": "DF_SoftWorks_JSON_Employee",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Employee_JSON",
						"type": "DatasetReference"
					},
					"name": "EmployeeJSONTable"
				},
				{
					"dataset": {
						"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Clockings_JSON",
						"type": "DatasetReference"
					},
					"name": "ClockingsJSONTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Employee",
						"type": "DatasetReference"
					},
					"name": "EmployeeTable"
				},
				{
					"dataset": {
						"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Clockings",
						"type": "DatasetReference"
					},
					"name": "ClockingsTable"
				}
			],
			"transformations": [
				{
					"name": "EmployeeDateConversion"
				},
				{
					"name": "EmployeeUpsertCondition",
					"description": "Upsert condition set to always be true so all fields are updated with latest values and any new records are inserted. The Key column used to check for upsert is the EmployeeNumber and is set on the sink task and "
				},
				{
					"name": "ClockingsDateConversion"
				},
				{
					"name": "ClockingsUpsertCondition"
				}
			],
			"scriptLines": [
				"source(output(",
				"          department as string,",
				"          clockNumber as string,",
				"          clocking as string,",
				"          dateOfBirth as string,",
				"          dateStarted as string,",
				"          dateTerminated as string,",
				"          firstname as string,",
				"          surname as string,",
				"          employeeName as string,",
				"          employeeNumber as string,",
				"          employeeEmail as string,",
				"          employeeStatus as string,",
				"          salary as string,",
				"          roster as string,",
				"          hourlyRate as string,",
				"          payType as string,",
				"          payNumber as string,",
				"          masterPolicy as string,",
				"          supervisorName as string,",
				"          employeeCostCentre as string,",
				"          allocationGroup as string,",
				"          shiftlessPattern as string,",
				"          defaultBalanceCategory as string,",
				"          employeeGender as string,",
				"          healthcareBankGroup as string,",
				"          healthcareBankStatus as string,",
				"          selfRosteringGroup as string,",
				"          nextofKinContact as string,",
				"          {nextofKinTel.Number} as string,",
				"          nextofKinRelationship as string,",
				"          telephoneNo as string,",
				"          username as string,",
				"          nameAsSupervisor as string,",
				"          address1 as string,",
				"          address2 as string,",
				"          address3 as string,",
				"          address4 as string,",
				"          postcode as string,",
				"          nINumber as string,",
				"          accountName as string,",
				"          sortCode as string,",
				"          accountNumber as string,",
				"          item as string,",
				"          notes as string,",
				"          documentReference as string,",
				"          documentName as string,",
				"          jobTitle as string,",
				"          sickLeaveEntitlement as string,",
				"          holidayEntitlement as string,",
				"          modeofTransport as string,",
				"          homeLegalName as string,",
				"          reviewDate as string,",
				"          isSupervisor as string,",
				"          salaried as string,",
				"          costCentre as string,",
				"          deptExportCode as string,",
				"          deptImportCode as string,",
				"          comments as string,",
				"          softworksID as string,",
				"          SourceFileName as string,",
				"          RowID as integer",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EmployeeJSONTable",
				"source(output(",
				"          empNo as string,",
				"          clockId as string,",
				"          absId as string,",
				"          deptId as string,",
				"          jobId as string,",
				"          projId as string,",
				"          absoluteClockTime as string,",
				"          clockType as string,",
				"          clocDate as string,",
				"          clockTime as string,",
				"          seconds as string,",
				"          effectiveDate as string,",
				"          clockDuration as string,",
				"          application as string,",
				"          sourceType as long,",
				"          sourceData as string,",
				"          sourceEdit as string,",
				"          sourceClockingType as string,",
				"          longitude as string,",
				"          latitude as string,",
				"          accuracy as string,",
				"          decision as string,",
				"          delCode as string,",
				"          userId as string,",
				"          dateEntered as string,",
				"          deleted as string,",
				"          duplicate as string,",
				"          ignore as string,",
				"          inOut as string,",
				"          inClocking as string,",
				"          outClocking as string,",
				"          isActive as string,",
				"          new as string,",
				"          standard as string,",
				"          overtime as string,",
				"          callIn as string,",
				"          clockFlag as string,",
				"          edited as string,",
				"          calcInsert as string,",
				"          infringe as string,",
				"          previous as string,",
				"          problem as string,",
				"          twUser as string,",
				"          shiftMove as string,",
				"          showFlags as string,",
				"          showLongFlags as string,",
				"          isOverMidnight as string,",
				"          deviceTime as long,",
				"          TimeZone as string,",
				"          TimeZoneCod as long,",
				"          PrevAbsTime as long,",
				"          ReasonId as string,",
				"          Comments as string,",
				"          ApprovalState as string,",
				"          ApprovalStateCaption as string,",
				"          PrevApprovalState as string,",
				"          LocationText as string,",
				"          LocationEditText as string,",
				"          LocationTextExtended as string,",
				"          Offline as string,",
				"          AttachedDocumentId as string,",
				"          AssumedId as string,",
				"          SourceFileName as string,",
				"          RowID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ClockingsJSONTable",
				"EmployeeJSONTable derive(dateOfBirth = substring(dateOfBirth, 5, 4) + '-' + substring(dateOfBirth, 3, 2) + '-' + substring(dateOfBirth, 1, 2),",
				"          dateStarted = case(substring(dateStarted, 5, 2) > substring(toString(year(currentUTC())), 3, 2), '19' + substring(dateStarted, 5, 2) + '-' + substring(dateStarted, 3, 2) + '-' + substring(dateStarted, 1, 2), '20' + substring(dateStarted, 5, 2) + '-' + substring(dateStarted, 3, 2) + '-' + substring(dateStarted, 1, 2)),",
				"          dateTerminated = case(dateTerminated=='301299', '2099-12-30', '20' + substring(dateTerminated, 5, 2) + '-' + substring(dateTerminated, 3, 2) + '-' + substring(dateTerminated, 1, 2)),",
				"          reviewDate = case(reviewDate == '', '1900-01-01', substring(reviewDate, 5, 4) + '-' + substring(reviewDate, 3, 2) + '-' + substring(reviewDate, 1, 2)),",
				"          RowTimeStamp = currentUTC()) ~> EmployeeDateConversion",
				"EmployeeDateConversion alterRow(upsertIf(true())) ~> EmployeeUpsertCondition",
				"ClockingsJSONTable derive(ClockDateCon = substring(clocDate, 5, 4) + '-' + substring(clocDate, 3, 2) + '-' + substring(clocDate, 1, 2),",
				"          EffectiveDateCon = substring(effectiveDate, 5, 4) + '-' + substring(effectiveDate, 3, 2) + '-' + substring(effectiveDate, 1, 2),",
				"          DateEnteredCon = substring(dateEntered, 5, 4) + '-' + substring(dateEntered, 3, 2) + '-' + substring(dateEntered, 1, 2),",
				"          ClockTimeCon = toTimestamp(clockTime, 'HH:mm')) ~> ClockingsDateConversion",
				"ClockingsDateConversion alterRow(upsertIf(true())) ~> ClockingsUpsertCondition",
				"EmployeeUpsertCondition sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          Department as string,",
				"          ClockNumber as string,",
				"          Clocking as string,",
				"          DateOfBirth as date,",
				"          DateStarted as date,",
				"          DateTerminated as date,",
				"          Firstname as string,",
				"          Surname as string,",
				"          EmployeeName as string,",
				"          EmployeeNumber as string,",
				"          EmployeeEmail as string,",
				"          EmployeeStatus as string,",
				"          Salary as string,",
				"          Roster as string,",
				"          HourlyRate as decimal(8,2),",
				"          PayType as string,",
				"          PayNumber as string,",
				"          MasterPolicy as string,",
				"          SupervisorName as string,",
				"          EmployeeCostCentre as string,",
				"          AllocationGroup as string,",
				"          ShiftlessPattern as string,",
				"          DefaultBalanceCategory as string,",
				"          EmployeeGender as string,",
				"          HealthcareBankGroup as string,",
				"          HealthcareBankStatus as string,",
				"          SelfRosteringGroup as string,",
				"          NextofKinContact as string,",
				"          NextofKinTelNumber as string,",
				"          NextofKinRelationship as string,",
				"          TelephoneNo as string,",
				"          Username as string,",
				"          NameAsSupervisor as string,",
				"          Address1 as string,",
				"          Address2 as string,",
				"          Address3 as string,",
				"          Address4 as string,",
				"          Postcode as string,",
				"          NINumber as string,",
				"          AccountName as string,",
				"          SortCode as string,",
				"          AccountNumber as string,",
				"          Item as string,",
				"          Notes as string,",
				"          DocumentReference as string,",
				"          DocumentName as string,",
				"          JobTitle as string,",
				"          SickLeaveEntitlement as string,",
				"          HolidayEntitlement as string,",
				"          ModeofTransport as string,",
				"          HomeLegalName as string,",
				"          ReviewDate as date,",
				"          IsSupervisor as boolean,",
				"          Salaried as boolean,",
				"          CostCentre as string,",
				"          DeptExportCode as string,",
				"          DeptImportCode as string,",
				"          Comments as string,",
				"          SoftworksID as string,",
				"          SourceFileName as string,",
				"          RowTimeStamp as timestamp,",
				"          RowID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['EmployeeNumber'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Department = department,",
				"          ClockNumber = clockNumber,",
				"          Clocking = clocking,",
				"          DateOfBirth = dateOfBirth,",
				"          DateStarted = dateStarted,",
				"          DateTerminated = dateTerminated,",
				"          Firstname = firstname,",
				"          Surname = surname,",
				"          EmployeeName = employeeName,",
				"          EmployeeNumber = employeeNumber,",
				"          EmployeeEmail = employeeEmail,",
				"          EmployeeStatus = employeeStatus,",
				"          Salary = salary,",
				"          Roster = roster,",
				"          HourlyRate = hourlyRate,",
				"          PayType = payType,",
				"          PayNumber = payNumber,",
				"          MasterPolicy = masterPolicy,",
				"          SupervisorName = supervisorName,",
				"          EmployeeCostCentre = employeeCostCentre,",
				"          AllocationGroup = allocationGroup,",
				"          ShiftlessPattern = shiftlessPattern,",
				"          DefaultBalanceCategory = defaultBalanceCategory,",
				"          EmployeeGender = employeeGender,",
				"          HealthcareBankGroup = healthcareBankGroup,",
				"          HealthcareBankStatus = healthcareBankStatus,",
				"          SelfRosteringGroup = selfRosteringGroup,",
				"          NextofKinContact = nextofKinContact,",
				"          NextofKinTelNumber = {nextofKinTel.Number},",
				"          NextofKinRelationship = nextofKinRelationship,",
				"          TelephoneNo = telephoneNo,",
				"          Username = username,",
				"          NameAsSupervisor = nameAsSupervisor,",
				"          Address1 = address1,",
				"          Address2 = address2,",
				"          Address3 = address3,",
				"          Address4 = address4,",
				"          Postcode = postcode,",
				"          NINumber = nINumber,",
				"          AccountName = accountName,",
				"          SortCode = sortCode,",
				"          AccountNumber = accountNumber,",
				"          Item = item,",
				"          Notes = notes,",
				"          DocumentReference = documentReference,",
				"          DocumentName = documentName,",
				"          JobTitle = jobTitle,",
				"          SickLeaveEntitlement = sickLeaveEntitlement,",
				"          HolidayEntitlement = holidayEntitlement,",
				"          ModeofTransport = modeofTransport,",
				"          HomeLegalName = homeLegalName,",
				"          ReviewDate = reviewDate,",
				"          IsSupervisor = isSupervisor,",
				"          Salaried = salaried,",
				"          CostCentre = costCentre,",
				"          DeptExportCode = deptExportCode,",
				"          DeptImportCode = deptImportCode,",
				"          Comments = comments,",
				"          SoftworksID = softworksID,",
				"          SourceFileName,",
				"          RowTimeStamp",
				"     )) ~> EmployeeTable",
				"ClockingsUpsertCondition sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmpNo as integer,",
				"          ClockId as string,",
				"          AbsId as string,",
				"          DeptId as string,",
				"          JobId as string,",
				"          ProjId as string,",
				"          AbsoluteClockTime as string,",
				"          ClockType as string,",
				"          ClockDate as date,",
				"          ClockTime as timestamp,",
				"          Seconds as string,",
				"          EffectiveDate as date,",
				"          ClockDuration as string,",
				"          Application as string,",
				"          SourceType as long,",
				"          SourceData as string,",
				"          SourceEdit as string,",
				"          SourceClockingType as string,",
				"          Longitude as string,",
				"          Latitude as string,",
				"          Accuracy as string,",
				"          Decision as string,",
				"          DelCode as string,",
				"          UserId as string,",
				"          DateEntered as date,",
				"          Deleted as string,",
				"          Duplicate as string,",
				"          Ignore as string,",
				"          InOut as string,",
				"          InClocking as string,",
				"          OutClocking as string,",
				"          IsActive as string,",
				"          New as string,",
				"          Standard as string,",
				"          Overtime as string,",
				"          CallIn as string,",
				"          ClockFlag as string,",
				"          Edited as string,",
				"          CalcInsert as string,",
				"          Infringe as string,",
				"          Previous as string,",
				"          Problem as string,",
				"          TwUser as string,",
				"          ShiftMove as string,",
				"          ShowFlags as string,",
				"          ShowLongFlags as string,",
				"          IsOverMidnight as string,",
				"          DeviceTime as long,",
				"          TimeZone as string,",
				"          TimeZoneCod as long,",
				"          PrevAbsTime as long,",
				"          ReasonId as string,",
				"          Comments as string,",
				"          ApprovalState as string,",
				"          ApprovalStateCaption as string,",
				"          PrevApprovalState as string,",
				"          LocationText as string,",
				"          LocationEditText as string,",
				"          LocationTextExtended as string,",
				"          Offline as string,",
				"          AttachedDocumentId as string,",
				"          AssumedId as string,",
				"          SourceFileName as string,",
				"          RowID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['EmpNo','ClockId','AbsId','JobId','AbsoluteClockTime'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EmpNo = empNo,",
				"          ClockId = clockId,",
				"          AbsId = absId,",
				"          DeptId = deptId,",
				"          JobId = jobId,",
				"          ProjId = projId,",
				"          AbsoluteClockTime = absoluteClockTime,",
				"          ClockType = clockType,",
				"          ClockDate = ClockDateCon,",
				"          ClockTime = ClockTimeCon,",
				"          Seconds = seconds,",
				"          EffectiveDate = EffectiveDateCon,",
				"          ClockDuration = clockDuration,",
				"          Application = application,",
				"          SourceType = sourceType,",
				"          SourceData = sourceData,",
				"          SourceEdit = sourceEdit,",
				"          SourceClockingType = sourceClockingType,",
				"          Longitude = longitude,",
				"          Latitude = latitude,",
				"          Accuracy = accuracy,",
				"          Decision = decision,",
				"          DelCode = delCode,",
				"          UserId = userId,",
				"          DateEntered = DateEnteredCon,",
				"          Deleted = deleted,",
				"          Duplicate = duplicate,",
				"          Ignore = ignore,",
				"          InOut = inOut,",
				"          InClocking = inClocking,",
				"          OutClocking = outClocking,",
				"          IsActive = isActive,",
				"          New = new,",
				"          Standard = standard,",
				"          Overtime = overtime,",
				"          CallIn = callIn,",
				"          ClockFlag = clockFlag,",
				"          Edited = edited,",
				"          CalcInsert = calcInsert,",
				"          Infringe = infringe,",
				"          Previous = previous,",
				"          Problem = problem,",
				"          TwUser = twUser,",
				"          ShiftMove = shiftMove,",
				"          ShowFlags = showFlags,",
				"          ShowLongFlags = showLongFlags,",
				"          IsOverMidnight = isOverMidnight,",
				"          DeviceTime = deviceTime,",
				"          TimeZone,",
				"          TimeZoneCod,",
				"          PrevAbsTime,",
				"          ReasonId,",
				"          Comments,",
				"          ApprovalState,",
				"          ApprovalStateCaption,",
				"          PrevApprovalState,",
				"          LocationText,",
				"          LocationEditText,",
				"          LocationTextExtended,",
				"          Offline,",
				"          AttachedDocumentId,",
				"          AssumedId,",
				"          SourceFileName",
				"     )) ~> ClockingsTable"
			]
		}
	}
}