{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Avery-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Softworks_EmployeeHoliday')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get File List').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy from file to SQL",
									"description": "the @item().Name variable is key on the source. the .Name provides the childItem Name from the output of the Metadata task",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": "EmployeeHoliday",
												"wildcardFileName": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Employee",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Employee",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "EmployeeNumber",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "EmployeeNumber",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Start Date",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "StartDate",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "End Date",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "EndDate",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Hours Duration",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "HoursDuration",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Absence Type",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "AbsenceType",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_PolestarStorageAcc_Softworks_RateSheets",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_AH2_TRANSFORM_DB",
											"type": "DatasetReference",
											"parameters": {
												"Schema": "Softworks",
												"Table": "EmployeeHoliday"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get File List",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_softworks_EmployeeHoliday",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Softworks"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-20T15:53:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Softworks_RateSheets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get File List').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy from file to SQL",
									"description": "the @item().Name variable is key on the source. the .Name provides the childItem Name from the output of the Metadata task",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": "RateSheets",
												"wildcardFileName": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Employee Number",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "EmployeeID",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Employee Name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "EmployeeName",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Contract Type",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "ContractType",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Contract Start Date",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "ContractStartDate",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Contract End Date",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "ContractEndDate",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "External Reference",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "ExternalReference",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Is Default",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "IsDefault",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_PolestarStorageAcc_Softworks_RateSheets",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_AH2_TRANSFORM_DB",
											"type": "DatasetReference",
											"parameters": {
												"Schema": "Softworks",
												"Table": "EmployeeRates"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get File List",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_PolestarStorageAcc_Softworks_RateSheets",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Softworks"
				},
				"annotations": [],
				"lastPublishTime": "2024-07-23T14:21:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Transform_HomeDetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Home Details",
						"description": "Copys the various Home Details from Avery DB vHomeDetails to TRANSFORM_DB HomeDetails",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"HomeID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "HomeID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "HomeID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "IntranetID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "IntranetID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "HomeName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Homename",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Group",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Group",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SubGroup",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "SubGroup",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Division",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Division",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DivisionAltName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DivisionAltName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Postcode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Postcode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ExchCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ExchCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CHCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CHCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CareBloxHomeid",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CareBloxHomeID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CBCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CBCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "HomeManager",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "HomeManager",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AdminEmail",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "AdminEmail",
											"type": "String",
											"physicalType": "nchar"
										}
									},
									{
										"source": {
											"name": "CSMEmail",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CSMEmail",
											"type": "String",
											"physicalType": "nchar"
										}
									},
									{
										"source": {
											"name": "RegionalDirector",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RegionalDirector",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RegionalDirectorEmail",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RegionalDirectorEmail",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OpsDirector",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "OpsDirector",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OpsDirectorEmail",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "OpsDirectorEmail",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH2_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Avery",
									"Table": "VHomeDetails"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB_Avery_HomeDetails",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Avery/Children Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-10T08:27:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Yardi_AEMS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Look up Values",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT HOME_REF, HomeName, IntranetID FROM ColdHarbourHomeID WHERE HOME_REF = '@{variables('Home_Ref')}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AH2_YardiStage",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						}
					},
					{
						"name": "AEMS Enquiry",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set HomeName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set IntranetID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT\n    ID\n    ,AEMS_ID\n    ,aems_version\n    ,homeID\n    ,uploadedBy\n    ,managerEmailed\n    ,enquiryStatus\n    ,enquiryID\n    ,initialEnquiry\n    ,enquirerSalutation\n    ,enquirerFirstName \n    ,enquirerLastName \n    ,enquirerSalutationTwo\n    ,enquirerLastNameTwo \n    ,enquirerFirstNameTwo \n    ,enquiryDate\n    ,enquirerRelationshipToResident\n    ,en_areacode\n    ,enquirerTelephone \n    ,enquiry_mobile \n    ,enquirerEmail \n    ,enquirerAddress \n    ,enquirerAddressOne \n    ,enquirerAddressTwo \n    ,enquirerAddressThree \n    ,enquiry_postcode \n    ,enquiry_postcode_two \n    ,residentSalutation\n    ,residentFirstName \n    ,residentLastName \n    ,residentDOB \n    ,residentSalutationTwo\n    ,residentFirstNameTwo\n    ,residentLastNameTwo\n    ,residentDOBTwo\n    ,residentNOK\n    ,residentAddress \n    ,residentAddressOne \n    ,residentAddressTwo \n    ,residentAddressThree \n    ,residentPostcode \n    ,residentTelephone \n    ,residentCareCategory\n    ,residentFundingCategory\n    ,residentCareCategoryTwo\n    ,funding_total\n    ,residentFunding\n    ,residentFundingTwo\n    ,enquiryDetails \n    ,enquiryType\n    ,responseTime\n    ,responseCurrentStatus\n    ,responseNeeded\n    ,responseAmountTried\n    ,followUpDate\n    ,followUpReason\n    ,uploadToCH\n    ,admissionDate\n    ,enquiryClosed\n    ,managerContacted\n    ,homeVisit\n    ,assessmentBooked\n    ,assesmentComplete\n    ,admission\n    ,homeVisitBooked\n    ,admissionBooked\n    ,video_booked\n    ,video_complete\n    ,homeVisitRequested\n    ,assesmentRequested\n    ,newEnquiry\n    ,cameFrom\n    ,enquirer_address \n    ,enquirer_postcode \n    ,lng\n    ,lat\n    ,enquirer_area\n    ,enquirer_county\n    ,nok_name\n    ,nok_surname\n    ,nok_county\n    ,nok_relation\n    ,nok_telephone\n    ,nok_mobile\n    ,nok_address\n    ,resident_county\n    ,nok_Salutation\n    ,newsletter_receive\n    ,newsletter_email\n    ,enquiry_urgent\n    ,optOut\n    ,type_news\n    ,type_mag\n    ,type_other\n    ,gp_name\n    ,gp_address\n    ,gp_telephone\n    ,gp_requested\n    ,gp_received\n    ,website\n    ,brochure\n    ,brochure_requestID\n    ,entryMethod\n    ,current_action_id\n    ,column_hash\n    ,receiveMarketing\n    ,willTopUp\n    ,enquiry_entered_from\n    ,enquiry_closed_reason\n    ,enquiry_deleted\n    ,enquiry_weight\nFROM \n    AEMS.AEMS_Enquiries AS E\nWHERE \n    E.homeID IN (@{variables('IntranetID')})",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('AEMS Enquiry - ', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set HomeName",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Look up Values",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "HomeName",
							"value": {
								"value": "@activity('Look up Values').output.firstRow.HomeName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set IntranetID",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Look up Values",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "IntranetID",
							"value": {
								"value": "@activity('Look up Values').output.firstRow.IntranetID",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AEMS Enquiry Actions",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "AEMS Enquiry",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \n    A.ID\n    ,A.AEMS_ID\n    ,enquiry_setBy\n    ,enquiry_id\n    ,enquiry_dateRequired\n    ,enquiry_reason\n    ,enquiry_contact\n    ,enquiry_actionComplete\n    ,enquiry_actionInserted\n    ,enquiry_actionCompleteDate\n    ,enquiry_actionCompleteBy\n    ,enquiry_homeID\n    ,enquiry_missed\n    ,enquiry_missedEmail\n    ,enquiry_missedEmailDate\n    ,enquiry_initialContact\n    ,enquiry_flag\n    ,enquiry_critical\n    --,REPLACE(enquiry_details, '\"', '')\n    ,REPLACE(CONVERT(VARCHAR(MAX), enquiry_details), '\"', '') AS enquiry_details\n    ,enquiry_picked_up\n    ,enquiry_assigned_to\n    ,enquiry_assigned_when\n    ,enquiry_action_call_handler\n    ,enquiry_new\nFROM \n    AEMS.AEMS_Enquiries_Actions AS A\n\n    INNER JOIN AEMS.AEMS_Enquiries AS E\n        ON E.AEMS_ID = A.enquiry_id\n        AND E.homeID = A.enquiry_homeID\n    WHERE\n        A.enquiry_homeID IN (@{variables('IntranetID')})\n        ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('AEMS Enquiry Actions - ', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Home_Ref": {
						"type": "String",
						"defaultValue": "611"
					},
					"HomeName": {
						"type": "String"
					},
					"IntranetID": {
						"type": "String",
						"defaultValue": "7581,83,7596,7598"
					}
				},
				"folder": {
					"name": "Yardi/AEMS"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Yardi_DependencyTool')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Look up Values",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT HOME_REF, HomeName, IntranetID FROM ColdHarbourHomeID WHERE HOME_REF = '@{variables('Home_Ref')}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AH2_YardiStage",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						}
					},
					{
						"name": "Set HomeName",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "HomeName",
							"value": {
								"value": "@activity('Look up Values').output.firstRow.HomeName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set IntranetID",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "IntranetID",
							"value": "[[object Object]"
						}
					},
					{
						"name": "Export Dependency Records",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set IntranetID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT\n    R.ID,\n    R.Assesment_Date,\n    R.Status,\n    R.Homename,\n    R.Intranet,\n    R.Res_No,\n    R.Res_First_Name,\n    R.Res_Surname,\n    R.Unit,\n    R.Room_No,\n    R.Type,\n    R.Total_Standard_Score AS Total_Service_Duration,\n\n    Q1.Service_Description AS Service1_Description,\n    r.Q1_Score AS Service1_Score,\n    r.Q1_Standard_Score AS Service1_MinutesRequired,\n    Q1.Support_Description AS Service1_SupportDescription,\n    \n    Q2.Service_Description AS Service2_Description,\n    r.Q2_Score AS Service2_Score,\n    r.Q2_Standard_Score AS Service2_MinutesRequired,\n    Q2.Support_Description AS Service2_SupportDescription,\n\n    Q3.Service_Description AS Service3_Description,\n    r.Q3_Score AS Service3_Score,\n    r.Q3_Standard_Score AS Service3_MinutesRequired,\n    Q3.Support_Description AS Service3_SupportDescription,\n\n    Q4.Service_Description AS Service4_Description,\n    r.Q4_Score AS Service4_Score,\n    r.Q4_Standard_Score AS Service4_MinutesRequired,\n    Q4.Support_Description AS Service4_SupportDescription,\n\n    Q5.Service_Description AS Service5_Description,\n    r.Q5_Score AS Service5_Score,\n    r.Q5_Standard_Score AS Service5_MinutesRequired,\n    Q5.Support_Description AS Service5_SupportDescription,\n\n    Q6.Service_Description AS Service6_Description,\n    r.Q6_Score AS Service6_Score,\n    r.Q6_Standard_Score AS Service6_MinutesRequired,\n    Q6.Support_Description AS Service6_SupportDescription,\n\n    Q7.Service_Description AS Service7_Description,\n    r.Q7_Score AS Service7_Score,\n    r.Q7_Standard_Score AS Service7_MinutesRequired,\n    Q7.Support_Description AS Service7_SupportDescription,\n\n    Q8.Service_Description AS Service8_Description,\n    r.Q8_Score AS Service8_Score,\n    r.Q8_Standard_Score AS Service8_MinutesRequired,\n    Q8.Support_Description AS Service8_SupportDescription,\n\n    Q9.Service_Description AS Service9_Description,\n    r.Q9_Score AS Service9_Score,\n    r.Q9_Standard_Score AS Service9_MinutesRequired,\n    Q9.Support_Description AS Service9_SupportDescription,\n\n    Q10.Service_Description AS Service10_Description,\n    r.Q10_Score AS Service10_Score,\n    r.Q10_Standard_Score AS Service10_MinutesRequired,\n    Q10.Support_Description AS Service10_SupportDescription,\n\n    Q11.Service_Description AS Service11_Description,\n    r.Q11_Score AS Service11_Score,\n    r.Q11_Standard_Score AS Service11_MinutesRequired,\n    Q11.Support_Description AS Service11_SupportDescription,\n\n    Q12.Service_Description AS Service12_Description,\n    r.Q12_Score AS Service12_Score,\n    r.Q12_Standard_Score AS Service12_MinutesRequired,\n    Q12.Support_Description AS Service12_SupportDescription,\n\n    Q13.Service_Description AS Service13_Description,\n    r.Q13_Score AS Service13_Score,\n    r.Q13_Standard_Score AS Service13_MinutesRequired,\n    Q13.Support_Description AS Service13_SupportDescription\nFROM \n    Dependency_Tool_Responses AS R\n\n    LEFT JOIN Dependency_Tool AS Q1\n        ON Q1.Support_Level = R.Q1_Score\n        AND Q1.Service_Number = 1\n\n    LEFT JOIN Dependency_Tool AS Q2\n        ON Q2.Support_Level = R.Q2_Score\n        AND Q2.Service_Number = 2\n\n    LEFT JOIN Dependency_Tool AS Q3\n        ON Q3.Support_Level = R.Q3_Score\n        AND Q3.Service_Number = 3\n\n    LEFT JOIN Dependency_Tool AS Q4\n        ON Q4.Support_Level = R.Q4_Score\n        AND Q4.Service_Number = 4\n\n    LEFT JOIN Dependency_Tool AS Q5\n        ON Q5.Support_Level = R.Q5_Score\n        AND Q5.Service_Number = 5\n\n    LEFT JOIN Dependency_Tool AS Q6\n        ON Q6.Support_Level = R.Q6_Score\n        AND Q6.Service_Number = 6\n\n    LEFT JOIN Dependency_Tool AS Q7\n        ON Q7.Support_Level = R.Q7_Score\n        AND Q7.Service_Number = 7\n\n    LEFT JOIN Dependency_Tool AS Q8\n        ON Q8.Support_Level = R.Q8_Score\n        AND Q8.Service_Number = 8\n\n    LEFT JOIN Dependency_Tool AS Q9\n        ON Q9.Support_Level = R.Q9_Score\n        AND Q9.Service_Number = 9\n\n    LEFT JOIN Dependency_Tool AS Q10\n        ON Q10.Support_Level = R.Q10_Score\n        AND Q10.Service_Number = 10\n\n    LEFT JOIN Dependency_Tool AS Q11\n        ON Q11.Support_Level = R.Q11_Score\n        AND Q11.Service_Number = 11\n\n    LEFT JOIN Dependency_Tool AS Q12\n        ON Q12.Support_Level = R.Q12_Score\n        AND Q12.Service_Number = 12\n\n    LEFT JOIN Dependency_Tool AS Q13\n        ON Q13.Support_Level = R.Q13_Score\n        AND Q13.Service_Number = 13\nWHERE \n    --R.Status = 'Active' \n    R.Intranet IN (@{variables('IntranetID')})\nORDER BY \n    Intranet ASC, \n    Assesment_Date ASC",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH2_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Welltower Homes', ' - Dependency Tool Responses - ', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Home_Ref": {
						"type": "String"
					},
					"HomeName": {
						"type": "String"
					},
					"IntranetID": {
						"type": "String",
						"defaultValue": "7581, 7596, 7598"
					}
				},
				"folder": {
					"name": "Yardi/Dependency Tool"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Yardi_ResidentForms')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Home",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT HOME_REF, HomeName, SITE_REF, IntranetID FROM ColdHarbourHomeID WHERE HOME_REF = '@{variables('Home_Ref')}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AH2_YardiStage",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Set HomeName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Home",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "HomeName",
							"value": {
								"value": "@activity('Lookup Home').output.firstRow.HomeName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set HomeName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set IntranetID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \n    [ID]\n    ,[res_no]\n    ,[forename]\n    ,[surname]\n    ,[intranet]\n    ,[change_date]\n    ,[admitted_from]\n    ,[tested_prior_last]\n    ,[tested_date]\n    ,[tested_where]\n    ,[tested_result]\n    ,[symptomatic]\n    ,[symptomatic_date]\n    ,[isolation_Date]\n    ,[isolation_end_date]\n    ,[days_isolated]\n    ,[protocol_followed]\n    ,[hospital_prior]\n    ,[Hospital_lastdate]\n    ,[hospital_duration]\n    ,[hospital_tested]\n    ,[hospital_tested_date]\n    ,[hospital_rest_result]\n    ,[form_type]\n    ,[status]\n    ,[room_no]\n    ,[funding_change]\n    ,[dilaps_charge]\n    ,[SL_Chk_by]\n    ,[SL_chk_date]\n    ,[discharge_reason]\n    ,[comments]\n    ,[dob]\n    ,[SL_comments]\n    ,[NHS_No]\n    ,[Nurs_res]\n    ,[Resp_Perm]\n    ,[disch_date]\n    ,[paymentonadm]\n    ,[NSHIDno]\n    ,[fee]\n    ,[Date_Complete]\nFROM \n    [ResidentForms].[Submitted_Forms]\nWHERE\n    intranet = '@{variables('IntranetID')}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH2_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat(variables('HomeName'), '  - Resident Forms - ', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set IntranetID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Home",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "IntranetID",
							"value": {
								"value": "@activity('Lookup Home').output.firstRow.IntranetID",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Home_Ref": {
						"type": "String",
						"defaultValue": "611"
					},
					"HomeName": {
						"type": "String"
					},
					"IntranetID": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Yardi/Resident Forms"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_YourHippo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Upsert Entity Details",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"EntityID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "EntityID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['name']"
										},
										"sink": {
											"name": "EntityName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['email']"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_EntityList",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "YourHippo",
									"Table": "Entity"
								}
							}
						]
					},
					{
						"name": "Upsert Courses",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Upsert Entity Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"CourseID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "CourseID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['title']"
										},
										"sink": {
											"name": "CourseTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['published']"
										},
										"sink": {
											"name": "Published",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"path": "$['archived']"
										},
										"sink": {
											"name": "Archived",
											"type": "Boolean"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_Courses",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "YourHippo",
									"Table": "Course"
								}
							}
						]
					},
					{
						"name": "Upsert Users",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Upsert Courses",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"UserID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "UserID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employee_number']"
										},
										"sink": {
											"name": "EmployeeNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['created_at']"
										},
										"sink": {
											"name": "CreatedDateTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['name']"
										},
										"sink": {
											"name": "UserName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['email']"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['gender']['description']"
										},
										"sink": {
											"name": "Gender",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['job_title']"
										},
										"sink": {
											"name": "JobTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['role']['name']"
										},
										"sink": {
											"name": "UserRole",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['primaryEntity']['id']"
										},
										"sink": {
											"name": "PrimaryEntityID",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "YourHippo",
									"Table": "Users"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Names",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "First Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Firstname",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Last Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Surname",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_PolestarStorageAcc_RandowData_csv",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "1000 Random Names with gender.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_Polestar",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Avery",
									"Table": "RandomName"
								}
							}
						]
					},
					{
						"name": "Address",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Address",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SingleAddress",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Postcode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Postcode",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_PolestarStorageAcc_RandowData_csv",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "250 B Random addresses.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_Polestar",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Avery",
									"Table": "RandomAddressBirchmereMews"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-09T14:51:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_CH_GRG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPrem_Coldharbour",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OnPrem"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_CH_IP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPrem_ColdHarbour_IP",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OnPrem"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_Exchequer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPrem_Exchequer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OnPrem"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sch_EveryDay_Once_5am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_AEMS_Post_Transfer_DuplicateClear",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-03-19T14:52:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								5
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SoftWorks_JSON_Employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Employee_JSON",
								"type": "DatasetReference"
							},
							"name": "EmployeeJSONTable"
						},
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Clockings_JSON",
								"type": "DatasetReference"
							},
							"name": "ClockingsJSONTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Employee",
								"type": "DatasetReference"
							},
							"name": "EmployeeTable"
						},
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Clockings",
								"type": "DatasetReference"
							},
							"name": "ClockingsTable"
						}
					],
					"transformations": [
						{
							"name": "EmployeeDateConversion"
						},
						{
							"name": "EmployeeUpsertCondition",
							"description": "Upsert condition set to always be true so all fields are updated with latest values and any new records are inserted. The Key column used to check for upsert is the EmployeeNumber and is set on the sink task and "
						},
						{
							"name": "ClockingsDateConversion"
						},
						{
							"name": "ClockingsUpsertCondition"
						}
					],
					"scriptLines": [
						"source(output(",
						"          department as string,",
						"          clockNumber as string,",
						"          clocking as string,",
						"          dateOfBirth as string,",
						"          dateStarted as string,",
						"          dateTerminated as string,",
						"          firstname as string,",
						"          surname as string,",
						"          employeeName as string,",
						"          employeeNumber as string,",
						"          employeeEmail as string,",
						"          employeeStatus as string,",
						"          salary as string,",
						"          roster as string,",
						"          hourlyRate as string,",
						"          payType as string,",
						"          payNumber as string,",
						"          masterPolicy as string,",
						"          supervisorName as string,",
						"          employeeCostCentre as string,",
						"          allocationGroup as string,",
						"          shiftlessPattern as string,",
						"          defaultBalanceCategory as string,",
						"          employeeGender as string,",
						"          healthcareBankGroup as string,",
						"          healthcareBankStatus as string,",
						"          selfRosteringGroup as string,",
						"          nextofKinContact as string,",
						"          {nextofKinTel.Number} as string,",
						"          nextofKinRelationship as string,",
						"          telephoneNo as string,",
						"          username as string,",
						"          nameAsSupervisor as string,",
						"          address1 as string,",
						"          address2 as string,",
						"          address3 as string,",
						"          address4 as string,",
						"          postcode as string,",
						"          nINumber as string,",
						"          accountName as string,",
						"          sortCode as string,",
						"          accountNumber as string,",
						"          item as string,",
						"          notes as string,",
						"          documentReference as string,",
						"          documentName as string,",
						"          jobTitle as string,",
						"          sickLeaveEntitlement as string,",
						"          holidayEntitlement as string,",
						"          modeofTransport as string,",
						"          homeLegalName as string,",
						"          reviewDate as string,",
						"          isSupervisor as string,",
						"          salaried as string,",
						"          costCentre as string,",
						"          deptExportCode as string,",
						"          deptImportCode as string,",
						"          comments as string,",
						"          softworksID as string,",
						"          SourceFileName as string,",
						"          RowID as integer",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EmployeeJSONTable",
						"source(output(",
						"          empNo as string,",
						"          clockId as string,",
						"          absId as string,",
						"          deptId as string,",
						"          jobId as string,",
						"          projId as string,",
						"          absoluteClockTime as string,",
						"          clockType as string,",
						"          clocDate as string,",
						"          clockTime as string,",
						"          seconds as string,",
						"          effectiveDate as string,",
						"          clockDuration as string,",
						"          application as string,",
						"          sourceType as long,",
						"          sourceData as string,",
						"          sourceEdit as string,",
						"          sourceClockingType as string,",
						"          longitude as string,",
						"          latitude as string,",
						"          accuracy as string,",
						"          decision as string,",
						"          delCode as string,",
						"          userId as string,",
						"          dateEntered as string,",
						"          deleted as string,",
						"          duplicate as string,",
						"          ignore as string,",
						"          inOut as string,",
						"          inClocking as string,",
						"          outClocking as string,",
						"          isActive as string,",
						"          new as string,",
						"          standard as string,",
						"          overtime as string,",
						"          callIn as string,",
						"          clockFlag as string,",
						"          edited as string,",
						"          calcInsert as string,",
						"          infringe as string,",
						"          previous as string,",
						"          problem as string,",
						"          twUser as string,",
						"          shiftMove as string,",
						"          showFlags as string,",
						"          showLongFlags as string,",
						"          isOverMidnight as string,",
						"          deviceTime as long,",
						"          TimeZone as string,",
						"          TimeZoneCod as long,",
						"          PrevAbsTime as long,",
						"          ReasonId as string,",
						"          Comments as string,",
						"          ApprovalState as string,",
						"          ApprovalStateCaption as string,",
						"          PrevApprovalState as string,",
						"          LocationText as string,",
						"          LocationEditText as string,",
						"          LocationTextExtended as string,",
						"          Offline as string,",
						"          AttachedDocumentId as string,",
						"          AssumedId as string,",
						"          SourceFileName as string,",
						"          RowID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ClockingsJSONTable",
						"EmployeeJSONTable derive(dateOfBirth = substring(dateOfBirth, 5, 4) + '-' + substring(dateOfBirth, 3, 2) + '-' + substring(dateOfBirth, 1, 2),",
						"          dateStarted = case(substring(dateStarted, 5, 2) > substring(toString(year(currentUTC())), 3, 2), '19' + substring(dateStarted, 5, 2) + '-' + substring(dateStarted, 3, 2) + '-' + substring(dateStarted, 1, 2), '20' + substring(dateStarted, 5, 2) + '-' + substring(dateStarted, 3, 2) + '-' + substring(dateStarted, 1, 2)),",
						"          dateTerminated = case(dateTerminated=='301299', '2099-12-30', '20' + substring(dateTerminated, 5, 2) + '-' + substring(dateTerminated, 3, 2) + '-' + substring(dateTerminated, 1, 2)),",
						"          reviewDate = case(reviewDate == '', '1900-01-01', substring(reviewDate, 5, 4) + '-' + substring(reviewDate, 3, 2) + '-' + substring(reviewDate, 1, 2)),",
						"          RowTimeStamp = currentUTC()) ~> EmployeeDateConversion",
						"EmployeeDateConversion alterRow(upsertIf(true())) ~> EmployeeUpsertCondition",
						"ClockingsJSONTable derive(ClockDateCon = substring(clocDate, 5, 4) + '-' + substring(clocDate, 3, 2) + '-' + substring(clocDate, 1, 2),",
						"          EffectiveDateCon = substring(effectiveDate, 5, 4) + '-' + substring(effectiveDate, 3, 2) + '-' + substring(effectiveDate, 1, 2),",
						"          DateEnteredCon = substring(dateEntered, 5, 4) + '-' + substring(dateEntered, 3, 2) + '-' + substring(dateEntered, 1, 2),",
						"          ClockTimeCon = toTimestamp(clockTime, 'HH:mm')) ~> ClockingsDateConversion",
						"ClockingsDateConversion alterRow(upsertIf(true())) ~> ClockingsUpsertCondition",
						"EmployeeUpsertCondition sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Department as string,",
						"          ClockNumber as string,",
						"          Clocking as string,",
						"          DateOfBirth as date,",
						"          DateStarted as date,",
						"          DateTerminated as date,",
						"          Firstname as string,",
						"          Surname as string,",
						"          EmployeeName as string,",
						"          EmployeeNumber as string,",
						"          EmployeeEmail as string,",
						"          EmployeeStatus as string,",
						"          Salary as string,",
						"          Roster as string,",
						"          HourlyRate as decimal(8,2),",
						"          PayType as string,",
						"          PayNumber as string,",
						"          MasterPolicy as string,",
						"          SupervisorName as string,",
						"          EmployeeCostCentre as string,",
						"          AllocationGroup as string,",
						"          ShiftlessPattern as string,",
						"          DefaultBalanceCategory as string,",
						"          EmployeeGender as string,",
						"          HealthcareBankGroup as string,",
						"          HealthcareBankStatus as string,",
						"          SelfRosteringGroup as string,",
						"          NextofKinContact as string,",
						"          NextofKinTelNumber as string,",
						"          NextofKinRelationship as string,",
						"          TelephoneNo as string,",
						"          Username as string,",
						"          NameAsSupervisor as string,",
						"          Address1 as string,",
						"          Address2 as string,",
						"          Address3 as string,",
						"          Address4 as string,",
						"          Postcode as string,",
						"          NINumber as string,",
						"          AccountName as string,",
						"          SortCode as string,",
						"          AccountNumber as string,",
						"          Item as string,",
						"          Notes as string,",
						"          DocumentReference as string,",
						"          DocumentName as string,",
						"          JobTitle as string,",
						"          SickLeaveEntitlement as string,",
						"          HolidayEntitlement as string,",
						"          ModeofTransport as string,",
						"          HomeLegalName as string,",
						"          ReviewDate as date,",
						"          IsSupervisor as boolean,",
						"          Salaried as boolean,",
						"          CostCentre as string,",
						"          DeptExportCode as string,",
						"          DeptImportCode as string,",
						"          Comments as string,",
						"          SoftworksID as string,",
						"          SourceFileName as string,",
						"          RowTimeStamp as timestamp,",
						"          RowID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['EmployeeNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Department = department,",
						"          ClockNumber = clockNumber,",
						"          Clocking = clocking,",
						"          DateOfBirth = dateOfBirth,",
						"          DateStarted = dateStarted,",
						"          DateTerminated = dateTerminated,",
						"          Firstname = firstname,",
						"          Surname = surname,",
						"          EmployeeName = employeeName,",
						"          EmployeeNumber = employeeNumber,",
						"          EmployeeEmail = employeeEmail,",
						"          EmployeeStatus = employeeStatus,",
						"          Salary = salary,",
						"          Roster = roster,",
						"          HourlyRate = hourlyRate,",
						"          PayType = payType,",
						"          PayNumber = payNumber,",
						"          MasterPolicy = masterPolicy,",
						"          SupervisorName = supervisorName,",
						"          EmployeeCostCentre = employeeCostCentre,",
						"          AllocationGroup = allocationGroup,",
						"          ShiftlessPattern = shiftlessPattern,",
						"          DefaultBalanceCategory = defaultBalanceCategory,",
						"          EmployeeGender = employeeGender,",
						"          HealthcareBankGroup = healthcareBankGroup,",
						"          HealthcareBankStatus = healthcareBankStatus,",
						"          SelfRosteringGroup = selfRosteringGroup,",
						"          NextofKinContact = nextofKinContact,",
						"          NextofKinTelNumber = {nextofKinTel.Number},",
						"          NextofKinRelationship = nextofKinRelationship,",
						"          TelephoneNo = telephoneNo,",
						"          Username = username,",
						"          NameAsSupervisor = nameAsSupervisor,",
						"          Address1 = address1,",
						"          Address2 = address2,",
						"          Address3 = address3,",
						"          Address4 = address4,",
						"          Postcode = postcode,",
						"          NINumber = nINumber,",
						"          AccountName = accountName,",
						"          SortCode = sortCode,",
						"          AccountNumber = accountNumber,",
						"          Item = item,",
						"          Notes = notes,",
						"          DocumentReference = documentReference,",
						"          DocumentName = documentName,",
						"          JobTitle = jobTitle,",
						"          SickLeaveEntitlement = sickLeaveEntitlement,",
						"          HolidayEntitlement = holidayEntitlement,",
						"          ModeofTransport = modeofTransport,",
						"          HomeLegalName = homeLegalName,",
						"          ReviewDate = reviewDate,",
						"          IsSupervisor = isSupervisor,",
						"          Salaried = salaried,",
						"          CostCentre = costCentre,",
						"          DeptExportCode = deptExportCode,",
						"          DeptImportCode = deptImportCode,",
						"          Comments = comments,",
						"          SoftworksID = softworksID,",
						"          SourceFileName,",
						"          RowTimeStamp",
						"     )) ~> EmployeeTable",
						"ClockingsUpsertCondition sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpNo as integer,",
						"          ClockId as string,",
						"          AbsId as string,",
						"          DeptId as string,",
						"          JobId as string,",
						"          ProjId as string,",
						"          AbsoluteClockTime as string,",
						"          ClockType as string,",
						"          ClockDate as date,",
						"          ClockTime as timestamp,",
						"          Seconds as string,",
						"          EffectiveDate as date,",
						"          ClockDuration as string,",
						"          Application as string,",
						"          SourceType as long,",
						"          SourceData as string,",
						"          SourceEdit as string,",
						"          SourceClockingType as string,",
						"          Longitude as string,",
						"          Latitude as string,",
						"          Accuracy as string,",
						"          Decision as string,",
						"          DelCode as string,",
						"          UserId as string,",
						"          DateEntered as date,",
						"          Deleted as string,",
						"          Duplicate as string,",
						"          Ignore as string,",
						"          InOut as string,",
						"          InClocking as string,",
						"          OutClocking as string,",
						"          IsActive as string,",
						"          New as string,",
						"          Standard as string,",
						"          Overtime as string,",
						"          CallIn as string,",
						"          ClockFlag as string,",
						"          Edited as string,",
						"          CalcInsert as string,",
						"          Infringe as string,",
						"          Previous as string,",
						"          Problem as string,",
						"          TwUser as string,",
						"          ShiftMove as string,",
						"          ShowFlags as string,",
						"          ShowLongFlags as string,",
						"          IsOverMidnight as string,",
						"          DeviceTime as long,",
						"          TimeZone as string,",
						"          TimeZoneCod as long,",
						"          PrevAbsTime as long,",
						"          ReasonId as string,",
						"          Comments as string,",
						"          ApprovalState as string,",
						"          ApprovalStateCaption as string,",
						"          PrevApprovalState as string,",
						"          LocationText as string,",
						"          LocationEditText as string,",
						"          LocationTextExtended as string,",
						"          Offline as string,",
						"          AttachedDocumentId as string,",
						"          AssumedId as string,",
						"          SourceFileName as string,",
						"          RowID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['EmpNo','ClockId','AbsId','JobId','AbsoluteClockTime'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EmpNo = empNo,",
						"          ClockId = clockId,",
						"          AbsId = absId,",
						"          DeptId = deptId,",
						"          JobId = jobId,",
						"          ProjId = projId,",
						"          AbsoluteClockTime = absoluteClockTime,",
						"          ClockType = clockType,",
						"          ClockDate = ClockDateCon,",
						"          ClockTime = ClockTimeCon,",
						"          Seconds = seconds,",
						"          EffectiveDate = EffectiveDateCon,",
						"          ClockDuration = clockDuration,",
						"          Application = application,",
						"          SourceType = sourceType,",
						"          SourceData = sourceData,",
						"          SourceEdit = sourceEdit,",
						"          SourceClockingType = sourceClockingType,",
						"          Longitude = longitude,",
						"          Latitude = latitude,",
						"          Accuracy = accuracy,",
						"          Decision = decision,",
						"          DelCode = delCode,",
						"          UserId = userId,",
						"          DateEntered = DateEnteredCon,",
						"          Deleted = deleted,",
						"          Duplicate = duplicate,",
						"          Ignore = ignore,",
						"          InOut = inOut,",
						"          InClocking = inClocking,",
						"          OutClocking = outClocking,",
						"          IsActive = isActive,",
						"          New = new,",
						"          Standard = standard,",
						"          Overtime = overtime,",
						"          CallIn = callIn,",
						"          ClockFlag = clockFlag,",
						"          Edited = edited,",
						"          CalcInsert = calcInsert,",
						"          Infringe = infringe,",
						"          Previous = previous,",
						"          Problem = problem,",
						"          TwUser = twUser,",
						"          ShiftMove = shiftMove,",
						"          ShowFlags = showFlags,",
						"          ShowLongFlags = showLongFlags,",
						"          IsOverMidnight = isOverMidnight,",
						"          DeviceTime = deviceTime,",
						"          TimeZone,",
						"          TimeZoneCod,",
						"          PrevAbsTime,",
						"          ReasonId,",
						"          Comments,",
						"          ApprovalState,",
						"          ApprovalStateCaption,",
						"          PrevApprovalState,",
						"          LocationText,",
						"          LocationEditText,",
						"          LocationTextExtended,",
						"          Offline,",
						"          AttachedDocumentId,",
						"          AssumedId,",
						"          SourceFileName",
						"     )) ~> ClockingsTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Data from file to YardiStage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "location",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "location",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "community",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "community",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "firstName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "firstName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "preferredName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "preferredName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "lastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "lastName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "sex",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "sex",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "dateOfBirth",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dateOfBirth",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "niNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "niNumber",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "nhsNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nhsNumber",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fileOpened",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fileOpened",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fileClosed",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fileClosed",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "closedReason",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "closedReason",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fileSuspended",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fileSuspended",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fileSuspendedChangeDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fileSuspendedChangeDate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "suspensionReason",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "suspensionReason",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fileUpdated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fileUpdated",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "room",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "externalReference",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "externalReference",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "risksToBeAwareOf",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "risksToBeAwareOf",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "personID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "personID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "connectionID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "connectionID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "locationID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "locationID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "communityID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "communityID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "topLevelCommunityID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "topLevelCommunityID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "folderID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "folderID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "height",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "height",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "minimumStaff",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "minimumStaff",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "movedInDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movedInDate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "dnaCPR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dnaCPR",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "isRespite",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "isRespite",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "isDayCare",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "isDayCare",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "isPalliative",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "isPalliative",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "gsfStageColour",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "gsfStageColour",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "gsfStageNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "gsfStageNumber",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "gsfStageDescription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "gsfStageDescription",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "externalID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "externalID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "medicalHistory",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "medicalHistory",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "medicalHistorySummary",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "medicalHistorySummary",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "likesToTalkAbout",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "likesToTalkAbout",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "socialInformation",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "socialInformation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "thirdParty",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "thirdParty",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "otherIdentifiers",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "otherIdentifiers",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "diagnosis",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "diagnosis",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "recordSupportType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "recordSupportType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "personalBelongings",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "personalBelongings",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "equipmentRequired",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "equipmentRequired",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imageBase64",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imageBase64",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "relationshipID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "relationshipID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "toPersonID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "toPersonID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fromPersonID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fromPersonID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "personName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "personName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "foreName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "foreName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "knownAs",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "knownAs",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "middleName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "middleName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "surName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "surName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "relationshipType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "relationshipType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "emergencyContact",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "emergencyContact",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "nextOfKin",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nextOfKin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "isFinancePowerOfAttorney",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "isFinancePowerOfAttorney",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "addresses",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "addresses",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "telephone",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "telephone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "telephone-Mobile",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "telephone-Mobile",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "telephone-WorkPhone",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "telephone-WorkPhone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "telephone-HomePhone",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "telephone-HomePhone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "notes",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "notes",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "documents",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "documents",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tempStatus",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tempStatus",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MedicareReference",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MedicareReference",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MedicareExpiry",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MedicareExpiry",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DVANumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DVANumber",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DVAColour",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DVAColour",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DVAExpiry",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DVAExpiry",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NDISNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NDISNumber",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Yardi_GarrettFile",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "All_ServiceUsers.OP169550.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_YardiStage",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "MCM",
									"Table": "ServiceUsersw"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Yardi/YardiStage"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_AEMS_Export')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Remove CR and LF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_AEMS_Enquiries_Export",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_AEMS_Export_PBData",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Remove CR and LF",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[AEMS].[Enquiries$RemoveHiddenCharacters]"
						},
						"linkedServiceName": {
							"referenceName": "AH2_TRANSFORM_DB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "AEMS"
				},
				"annotations": [],
				"lastPublishTime": "2024-04-29T16:06:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Artisan')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline to move Artisan Data to the Artisan SQL Server",
				"activities": [
					{
						"name": "Home Details",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_Homes",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "AEMS Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Home Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_AEMS_Enquiries",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Occupancy Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "AEMS Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_Occupancy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Artisan Debt",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Occupancy Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_Debt",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Artisan budget",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Artisan Debt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_budget",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Artisan HomeDetails",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Artisan budget",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_vHomeDetails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Artisan RLS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Artisan HomeDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_vRLS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Artisan"
				},
				"annotations": [],
				"lastPublishTime": "2024-07-02T10:33:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Bill_Profile_With_FundSource')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Export Profile and Fundsource",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT\r\n\tP.PRO_CODE AS profile_code\r\n\t,P.PRODESC AS profile_description\r\n\t,CONTACT.CONTACT_REF AS oCnta_Det_Ref\r\n\t,CONCAT(RTRIM(CONTACT.FORENAMES), RTRIM(CONTACT.SURNAME)) AS FundSourceName\t\r\nFROM \r\n\tFUNDSRC_HD AS ACC\r\n\r\n\tLEFT JOIN PROFILES AS P\r\n\t\tON P.PRO_REF = ACC.PRO_REF\r\n\r\n\tLEFT JOIN CONTACT_HD AS CONTACT\r\n\t\tON CONTACT.CONTACT_REF = ACC.CNTA_DET_REF\r\n\r\n\tLEFT JOIN CALENDAR_HD AS CALENDAR\r\n\t\tON CALENDAR.CAL_REF = ACC.CAL_REF\r\nWHERE\r\n\tP.FSTYPE = 401",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_OnPrem_CH_IP",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('LA Billing Profiles and FundSource - ', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Yardi/CHIP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_CH_IP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Broadshield_Download_Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Downloads data from Broadshields API each evening @ 11:45",
				"activities": [
					{
						"name": "Download Users",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BroadShield_Users",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Download Courses",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Download Users",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BroadShield_Courses",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Download UserCourses",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Download Courses",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BroadShield_UserCourses",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Broadshield"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-03T15:41:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Broadshield_Process_Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Uses the daily Json files from Broadshield API to update the Current table with an Upsert operation. And add new/updated records to the History tables.",
				"activities": [
					{
						"name": "Update Current data",
						"description": "Upserts data from the JSON files to the current tables",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BroadShield_JSON_SQL_Current",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Create History records",
						"description": "Inserts any new or updated records into the history tables.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update Current data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BroadShield_JSON_SQL_History",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Broadshield"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-08T10:01:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CH_Bill_Profile_With_Calendar')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Export billing profiles and Calendars used",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT\n\tP.PRO_CODE AS profile_code,\n\tP.PRODESC AS profile_description,\n\tCALENDAR.CAL_REF AS Cal_Ref,\n\tCALENDAR.CAL_CODE AS calendar_code,\n\tCALENDAR.CAL_DESC AS calendar_description\t\nFROM \n\tFUNDSRC_HD AS ACC\n\n\tLEFT JOIN PROFILES AS P\n\t\tON P.PRO_REF = ACC.PRO_REF\n\n\tLEFT JOIN CONTACT_HD AS CONTACT\n\t\tON CONTACT.CONTACT_REF = ACC.CNTA_DET_REF\n\n\tLEFT JOIN CALENDAR_HD AS CALENDAR\n\t\tON CALENDAR.CAL_REF = ACC.CAL_REF\nWHERE\n\tP.FSTYPE = 401",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_OnPrem_CH_IP",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('LA Billing Profile Calendar Usage - ', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Yardi/CHIP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_CH_IP')]"
			]
		}
	]
}