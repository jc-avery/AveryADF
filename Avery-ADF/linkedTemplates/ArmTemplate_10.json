{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Avery-ADF"
		},
		"AveryblobFileShare_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AveryblobFileShare'"
		},
		"AveryblobStorageAccount_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AveryblobStorageAccount'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Yardi_MaintApp_Tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DailyChecks_Mlog",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n    DailyChecks_Mlog.*,\n    --DailyChecks_Master.*,\n    Home.*\nFROM \n    DailyChecks_Mlog\n\n    INNER JOIN dbo.DailyChecks_Master \n        ON dbo.DailyChecks_Mlog.dc_master_id = dbo.DailyChecks_Master.dc_record_id\n\n    INNER JOIN vWelltowerYardiHomes AS Home\n        ON Home.IntranetID = DailyChecks_Master.dc_home_id",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - DailyChecks_Mlog -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DailyChecks_Master",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DailyChecks_Mlog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n    DailyChecks_Master.*,\n    Home.*\nFROM \n    DailyChecks_Master\n\n    INNER JOIN vWelltowerYardiHomes AS Home\n        ON Home.IntranetID = DailyChecks_Master.dc_home_id",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - DailyChecks_Master -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DailyChecks_MAP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DailyChecks_Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n    DailyChecks_MAP.*,\n    Home.*\nFROM \n    DailyChecks_MAP\n\n    INNER JOIN vWelltowerYardiHomes AS Home\n        ON Home.IntranetID = DailyChecks_MAP.dc_map_home",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - DailyChecks_MAP -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DailyChecks_CVlog",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DailyChecks_MAP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \r\n    DailyChecks_CVlog.*,\r\n    --DailyChecks_Master.*,\r\n    Home.*\r\nFROM \r\n    DailyChecks_CVlog\r\n\r\n    INNER JOIN dbo.DailyChecks_Master \r\n        ON dbo.DailyChecks_CVlog.dc_master_id = dbo.DailyChecks_Master.dc_record_id\r\n\r\n    INNER JOIN vWelltowerYardiHomes AS Home\r\n        ON Home.IntranetID = DailyChecks_Master.dc_home_id",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - DailyChecks_CVlog -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DailyChecks_ABT_Dropdown",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DailyChecks_CVlog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    DailyChecks_ABT_Dropdown",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - DailyChecks_ABT_Dropdown -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Checks_Callpoints",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DailyChecks_ABT_Dropdown",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    Checks_Callpoints AS CallPoints\n\n    INNER JOIN vWelltowerYardiHomes AS H\n        ON H.IntranetID = CallPoints.HomeID",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - Checks_Callpoints -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Checks_DoorsSensors",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Checks_Callpoints",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    Checks_DoorsSensors AS DoorsSensors\n\n    INNER JOIN vWelltowerYardiHomes AS H\n        ON H.IntranetID = DoorsSensors.HomeID",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - Checks_DoorsSensors -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Checks_FEBlankets",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Checks_DoorsSensors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    Checks_FEBlankets AS FEBlankets\n\n    INNER JOIN vWelltowerYardiHomes AS H\n        ON H.IntranetID = FEBlankets.HomeID",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - Checks_FEBlankets -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Checks_FireAlarms",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Checks_FEBlankets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    Checks_FireAlarms AS FireAlarms\n\n    INNER JOIN vWelltowerYardiHomes AS H\n        ON H.IntranetID = FireAlarms.HomeID",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - Checks_FireAlarms -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Checks_Floors",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Checks_FireAlarms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    Checks_Floors AS Floors\n\n    INNER JOIN vWelltowerYardiHomes AS H\n        ON H.IntranetID = Floors.HomeID",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - Checks_Floors -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Checks_Forms",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Checks_Floors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    Checks_Forms AS Forms",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - Checks_Forms -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Checks_Hoists",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Checks_Forms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    Checks_Hoists AS Hoists\n\n    INNER JOIN vWelltowerYardiHomes AS H\n        ON H.IntranetID = Hoists.HomeID",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - Checks_Hoists -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Checks_Inventory_General",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Checks_Hoists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    Checks_Inventory_General AS Inventory_General\n\n    INNER JOIN vWelltowerYardiHomes AS H\n        ON H.IntranetID = Inventory_General.HomeID",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - Checks_Inventory_General -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Checks_Master",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Checks_Inventory_General",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    Checks_Master\n\n    INNER JOIN vWelltowerYardiHomes AS H\n        ON H.IntranetID = Checks_Master.HomeID",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - Checks_Master -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Checks_ResultSets",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Checks_Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    Checks_ResultSets AS ResultSets\n\n    INNER JOIN vWelltowerYardiHomes AS H\n        ON H.IntranetID = ResultSets.HomeID",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - Checks_ResultSets -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Checks_NurseCallLocations",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Checks_ResultSets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \nFROM \n    Checks_NurseCallLocations AS NurseCallLocations\n\n    INNER JOIN vWelltowerYardiHomes AS H\n        ON H.IntranetID = NurseCallLocations.HomeID",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH1_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('Maint App - Checks_NurseCallLocations -', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Yardi/Maintenance App"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Yardi_ResidentForms')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Home",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT HOME_REF, HomeName, SITE_REF, IntranetID FROM ColdHarbourHomeID WHERE HOME_REF = '@{variables('Home_Ref')}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AH2_YardiStage",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Set HomeName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Home",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "HomeName",
							"value": {
								"value": "@activity('Lookup Home').output.firstRow.HomeName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set HomeName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set IntranetID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \n    [ID]\n    ,[res_no]\n    ,[forename]\n    ,[surname]\n    ,[intranet]\n    ,[change_date]\n    ,[admitted_from]\n    ,[tested_prior_last]\n    ,[tested_date]\n    ,[tested_where]\n    ,[tested_result]\n    ,[symptomatic]\n    ,[symptomatic_date]\n    ,[isolation_Date]\n    ,[isolation_end_date]\n    ,[days_isolated]\n    ,[protocol_followed]\n    ,[hospital_prior]\n    ,[Hospital_lastdate]\n    ,[hospital_duration]\n    ,[hospital_tested]\n    ,[hospital_tested_date]\n    ,[hospital_rest_result]\n    ,[form_type]\n    ,[status]\n    ,[room_no]\n    ,[funding_change]\n    ,[dilaps_charge]\n    ,[SL_Chk_by]\n    ,[SL_chk_date]\n    ,[discharge_reason]\n    ,[comments]\n    ,[dob]\n    ,[SL_comments]\n    ,[NHS_No]\n    ,[Nurs_res]\n    ,[Resp_Perm]\n    ,[disch_date]\n    ,[paymentonadm]\n    ,[NSHIDno]\n    ,[fee]\n    ,[Date_Complete]\nFROM \n    [ResidentForms].[Submitted_Forms]\nWHERE\n    intranet = '@{variables('IntranetID')}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH2_Avery",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat(variables('HomeName'), '  - Resident Forms - ', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set IntranetID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Home",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "IntranetID",
							"value": {
								"value": "@activity('Lookup Home').output.firstRow.IntranetID",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Home_Ref": {
						"type": "String",
						"defaultValue": "611"
					},
					"HomeName": {
						"type": "String"
					},
					"IntranetID": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Yardi/Resident Forms"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_YourHippo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Upsert Entity Details",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"EntityID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "EntityID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['name']"
										},
										"sink": {
											"name": "EntityName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['email']"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_EntityList",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "YourHippo",
									"Table": "Entity"
								}
							}
						]
					},
					{
						"name": "Upsert Courses",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Upsert Entity Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"CourseID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "CourseID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['title']"
										},
										"sink": {
											"name": "CourseTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['published']"
										},
										"sink": {
											"name": "Published",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"path": "$['archived']"
										},
										"sink": {
											"name": "Archived",
											"type": "Boolean"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_Courses",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "YourHippo",
									"Table": "Course"
								}
							}
						]
					},
					{
						"name": "Upsert Users",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Upsert Courses",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"UserID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "UserID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['employee_number']"
										},
										"sink": {
											"name": "EmployeeNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['created_at']"
										},
										"sink": {
											"name": "CreatedDateTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['name']"
										},
										"sink": {
											"name": "UserName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['email']"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['gender']['description']"
										},
										"sink": {
											"name": "Gender",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['job_title']"
										},
										"sink": {
											"name": "JobTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['role']['name']"
										},
										"sink": {
											"name": "UserRole",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['primaryEntity']['id']"
										},
										"sink": {
											"name": "PrimaryEntityID",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "YourHippo",
									"Table": "Users"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_YourHippo_AllResults')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"ResultID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "ResultID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['passed']"
										},
										"sink": {
											"name": "Passed",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"path": "$['score']"
										},
										"sink": {
											"name": "Score",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"path": "$['completed_at']"
										},
										"sink": {
											"name": "CompletedAt",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['expires_at']"
										},
										"sink": {
											"name": "ExpiresAt",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['course']['id']"
										},
										"sink": {
											"name": "CourseID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['user']['id']"
										},
										"sink": {
											"name": "UserID",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_AllResults",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "YourHippo",
									"Table": "Results"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_YourHippo_Delete_Archive_Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Deletes files older than 4 days from the archive to prevent build up",
				"activities": [
					{
						"name": "Delete Result Archive Files",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": "WebhookFiles/Archive/Result"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"modifiedDatetimeStart": {
									"value": "@addDays(utcNow(), -20 )",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@addDays(utcNow(), -4 )",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete User Archive",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete Result Archive Files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": "WebhookFiles/Archive/User"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"modifiedDatetimeStart": {
									"value": "@addDays(utcNow(), -20 )",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@addDays(utcNow(), -4 )",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_YourHippo_Move_WebHook_Files_Step1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Moves the user and result files to Fileshare to be combined by a python script in the VM. Moves Verification files to another folder.",
				"activities": [
					{
						"name": "Move User Files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "webhook$user*.json",
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Route_Files",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_PolestarStorageAcc_Fileshare",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Move Result Files",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Move User Files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "webhook$result*.json",
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Route_Files",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_PolestarStorageAcc_Fileshare",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Move Verification Files",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Move Result Files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "webhook$verification*.json",
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Route_Files",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles','/','Verification')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo/Child Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_YourHippo_Move_WebHook_Files_Step2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Moves the merged user and result file back to YourHippo container.",
				"activities": [
					{
						"name": "Copy Merged files",
						"description": "Move merged files to AZ storage container",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Remove webhookfiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "yh_merged*.json",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_PolestarStorageAcc_Fileshare",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Polestar_Storage",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@concat('yourhippo','/','mergedfiles', '/', formatDateTime(utcNow(), 'yyyy'),'/',formatDateTime(utcNow(), 'MM'),'/',formatDateTime(utcNow(), 'dd') )",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Remove webhookfiles",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_PolestarStorageAcc_Fileshare",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureFileStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "webhook$*.json",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Remove webhookfiles_copy1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Merged files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_PolestarStorageAcc_Fileshare",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureFileStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "yh_merged_*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo/Child Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_YourHippo_Process_Merged_Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Inserts results into the stage table and upserts user table",
				"activities": [
					{
						"name": "Copy merged results data to Stage table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "ResultID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['passed']"
										},
										"sink": {
											"name": "Passed",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"path": "[['grade']"
										},
										"sink": {
											"name": "Grade",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['score']"
										},
										"sink": {
											"name": "Score",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"path": "[['completed_at']"
										},
										"sink": {
											"name": "CompletedAt",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "[['expires_at']"
										},
										"sink": {
											"name": "ExpiresAt",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "[['has_expired']"
										},
										"sink": {
											"name": "HasExpired",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"path": "[['course']['id']"
										},
										"sink": {
											"name": "CourseID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['user']['id']"
										},
										"sink": {
											"name": "UserID",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_Merged_results",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "YourHippo",
									"Table": "StageResults"
								}
							}
						]
					},
					{
						"name": "Upsert users data to Users table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy merged results data to Stage table",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"UserID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "UserID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['employee_number']"
										},
										"sink": {
											"name": "EmployeeNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['created_at']"
										},
										"sink": {
											"name": "CreatedDateTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "[['start_date']"
										},
										"sink": {
											"name": "StartDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "UserName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['email']"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['gender']['description']"
										},
										"sink": {
											"name": "Gender",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['job_title']"
										},
										"sink": {
											"name": "JobTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['role']['name']"
										},
										"sink": {
											"name": "UserRole",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['primaryEntity']['id']"
										},
										"sink": {
											"name": "PrimaryEntityID",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['users']"
							}
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_Merged_users",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "YourHippo",
									"Table": "Users"
								}
							}
						]
					},
					{
						"name": "Exceptions",
						"description": "Add any exceptions to a Exception table, to be retried at a later date",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Upsert users data to Users table",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['file_type']"
										},
										"sink": {
											"name": "QueryType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "ID",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_Merged_Result_Exceptions",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "YourHippo",
									"Table": "WebHookExceptions"
								}
							}
						]
					},
					{
						"name": "Failure on Exceptions",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Exceptions",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Failure on Exceptions",
							"errorCode": "404"
						}
					},
					{
						"name": "Failure on Users",
						"description": "",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Upsert users data to Users table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Failure on Users",
							"errorCode": "404"
						}
					},
					{
						"name": "Failure on Results",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Copy merged results data to Stage table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Failure on Results",
							"errorCode": "404"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo/Child Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/XPL_Yardi_Actuals')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Exports the current monthh actuals/TB/Journel Entries from the Actuals table from TRANSFORM_DB. This table is loaded by the excel file macro on 192.168.1.165 (also hosted on the S drive). Taking data from Exchequer using the OLE links.",
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "\r\nSELECT\r\n    ExchCode,\r\n    GLCODE,\r\n    actual_desc,\r\n    CAST(Period AS DATE) AS Period,\r\n    amount * -1 AS amount\r\nFROM \r\n    Exchequer.Actuals \r\nWHERE \r\n    Period = '2025-04-01'\r\n    AND ExchCode IN \r\n    (   \r\n    SELECT\r\n        ExchCode\r\n    FROM \r\n        Avery.HomeDetails\r\n    WHERE\r\n        ColdHarbourHOME_REF IN (\r\n        644,\r\n        627,\r\n        637,\r\n        649,\r\n        638,\r\n        655,\r\n        633,\r\n        628,\r\n        632,\r\n        641,\r\n        650,\r\n        654,\r\n        642,\r\n        643,\r\n        629,\r\n        647,\r\n        653,\r\n        630,\r\n        631,\r\n        610,\r\n        634,\r\n        635,\r\n        645,\r\n        646,\r\n        651,\r\n        636,\r\n        639,\r\n        652,\r\n        640,\r\n        648)\r\n    )\r\n    AND GLCODE \r\nIN (\r\n20000,\r\n20010,\r\n20020,\r\n21000,\r\n21010,\r\n21020,\r\n29000,\r\n29010,\r\n29020,\r\n29030,\r\n29040,\r\n29050,\r\n29900,\r\n29910,\r\n29920,\r\n29930,\r\n29931,\r\n29932,\r\n29940,\r\n29950,\r\n29955,\r\n29960,\r\n29965,\r\n29970,\r\n29975,\r\n29980,\r\n29990,\r\n29991,\r\n30000,\r\n30010,\r\n30020,\r\n30030,\r\n31000,\r\n31010,\r\n31020,\r\n31030,\r\n32000,\r\n32010,\r\n32020,\r\n32021,\r\n32025,\r\n32026,\r\n32030,\r\n32040,\r\n39000,\r\n39005,\r\n39006,\r\n39010,\r\n39011,\r\n39012,\r\n40000,\r\n40500,\r\n41000,\r\n41010,\r\n41020,\r\n41030,\r\n41500,\r\n41510,\r\n42000,\r\n42001,\r\n42002,\r\n42003,\r\n42010,\r\n42020,\r\n42030,\r\n42040,\r\n42050,\r\n42500,\r\n42510,\r\n42520,\r\n42530,\r\n42540,\r\n42550,\r\n43000,\r\n43010,\r\n43020,\r\n43500,\r\n43510,\r\n43520,\r\n43530,\r\n44000,\r\n44010,\r\n44020,\r\n44030,\r\n44040,\r\n44050,\r\n44060,\r\n44070,\r\n44080,\r\n44090,\r\n44100,\r\n44110,\r\n44500,\r\n44510,\r\n44520,\r\n44530,\r\n44540,\r\n44550,\r\n45000,\r\n45010,\r\n45020,\r\n45030,\r\n45500,\r\n45505,\r\n45510,\r\n45515,\r\n45520,\r\n45525,\r\n45530,\r\n45531,\r\n45535,\r\n45536,\r\n45540,\r\n45545,\r\n45550,\r\n45555,\r\n45560,\r\n45565,\r\n45570,\r\n45575,\r\n45580,\r\n45585,\r\n45599,\r\n49000,\r\n49005,\r\n49010,\r\n49015,\r\n49020,\r\n49025,\r\n49030,\r\n49035,\r\n49040,\r\n49045,\r\n49050,\r\n49055,\r\n49056,\r\n49060,\r\n49065,\r\n49070,\r\n49075,\r\n49080,\r\n50000,\r\n50010,\r\n50020,\r\n50030,\r\n50040,\r\n50050,\r\n50060,\r\n50070,\r\n50080,\r\n60000,\r\n60010,\r\n61000,\r\n62000,\r\n62001,\r\n62002,\r\n62010,\r\n62020,\r\n63000,\r\n63001,\r\n63002,\r\n63003,\r\n63004,\r\n63005,\r\n63006,\r\n63007,\r\n63008,\r\n63009,\r\n63100,\r\n63101,\r\n63102,\r\n63103,\r\n63104,\r\n63105,\r\n63106,\r\n63107,\r\n63108,\r\n63109,\r\n63200,\r\n63201,\r\n63202,\r\n63203,\r\n63204,\r\n63205,\r\n63206,\r\n63207,\r\n63208,\r\n63209,\r\n64000,\r\n64001,\r\n64002,\r\n64003,\r\n64004,\r\n64005,\r\n64006,\r\n64007,\r\n64008,\r\n64009,\r\n64100,\r\n64101,\r\n64102,\r\n64103,\r\n64104,\r\n64105,\r\n64106,\r\n64107,\r\n64108,\r\n64109,\r\n64200,\r\n64201,\r\n64202,\r\n64203,\r\n64204,\r\n64205,\r\n64206,\r\n64207,\r\n64208,\r\n64209,\r\n70000,\r\n70010,\r\n70011,\r\n70012,\r\n70020,\r\n71000,\r\n71010,\r\n71020,\r\n71030,\r\n71040,\r\n71050,\r\n72000,\r\n72010,\r\n72020,\r\n72030,\r\n73000,\r\n73001,\r\n73010,\r\n73020,\r\n73030,\r\n80000,\r\n80010,\r\n80020,\r\n81000,\r\n81005,\r\n81010,\r\n81015,\r\n81020,\r\n81030,\r\n81040,\r\n81050,\r\n81060,\r\n81070,\r\n81075,\r\n82000,\r\n82010,\r\n82015,\r\n82020,\r\n82030,\r\n82040,\r\n82050,\r\n82060,\r\n82070,\r\n82080,\r\n82090,\r\n82091,\r\n82100,\r\n82101,\r\n82102,\r\n82103,\r\n82104,\r\n82105,\r\n82106,\r\n82107,\r\n82108,\r\n82109,\r\n82110,\r\n82111,\r\n82112,\r\n82113,\r\n82114,\r\n82115,\r\n82116,\r\n82117,\r\n82118,\r\n82119,\r\n82120,\r\n82121,\r\n82122,\r\n82123,\r\n82124,\r\n82125,\r\n82126,\r\n82127,\r\n82128,\r\n82129,\r\n83000,\r\n83005,\r\n83010,\r\n83015,\r\n83020,\r\n83025,\r\n83030,\r\n83031,\r\n83035,\r\n83040,\r\n83042,\r\n83045,\r\n83050,\r\n83055,\r\n83060,\r\n83065,\r\n83070,\r\n83075,\r\n83080,\r\n83085,\r\n83086,\r\n83087,\r\n83090,\r\n83095,\r\n83100,\r\n83105,\r\n84000,\r\n84010,\r\n84011,\r\n84012,\r\n84020,\r\n84030,\r\n90000,\r\n90010,\r\n90020,\r\n90030,\r\n90031,\r\n90032,\r\n90040,\r\n90050\r\n)\r\nORDER BY\r\n    ExchCode ASC,\r\n    GLCODE ASC",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Exchequer",
									"Table": "Actuals"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@variables('FileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set PeriodDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PeriodDate",
							"value": {
								"value": "@formatDateTime(startOfMonth(utcNow()), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set FileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set PeriodDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileName",
							"value": {
								"value": "@concat('Avery Actuals - ',formatDateTime(variables('PeriodDate'), 'MMMM'), ' - ', variables('PeriodDate'), '.csv')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"PeriodDate": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Yardi/Exchequer"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/X_PL_YourHippo_Move_WebHook_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move User Files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "webhook$user*.json",
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Route_Files",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles','/','User')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Move Result Files",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Move User Files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "webhook$result*.json",
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Route_Files",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles','/','Result')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Move Verification Files",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Move Result Files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "webhook$verification*.json",
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Route_Files",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles','/','Verification')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo/Child Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/X_PL_YourHippo_Process_WebHook_Result_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Result File List",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Does WebhookFiles Result files exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_YourHippo_WebHook_Json_Result_File",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Process File List",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Result File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Result File List').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Process Result Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"ResultID"
												]
											},
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['data']['result']['id']"
													},
													"sink": {
														"name": "ResultID",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['passed']"
													},
													"sink": {
														"name": "Passed",
														"type": "Boolean"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['grade']"
													},
													"sink": {
														"name": "Grade",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['score']"
													},
													"sink": {
														"name": "Score",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['completed_at']"
													},
													"sink": {
														"name": "CompletedAt",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['expires_at']"
													},
													"sink": {
														"name": "ExpiresAt",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['has_expired']"
													},
													"sink": {
														"name": "HasExpired",
														"type": "Boolean"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['course']['id']"
													},
													"sink": {
														"name": "CourseID",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['user']['id']"
													},
													"sink": {
														"name": "UserID",
														"type": "String"
													}
												}
											],
											"collectionReference": ""
										}
									},
									"inputs": [
										{
											"referenceName": "DS_YourHippo_WebHook_Json_Result_File",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_AH2_TRANSFORM_DB",
											"type": "DatasetReference",
											"parameters": {
												"Schema": "YourHippo",
												"Table": "StageResults"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Archive Files",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Process File List",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles', '/', 'Result')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles', '/', 'Archive', '/', 'Result')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Does WebhookFiles Result files exists",
						"description": "Checks there are files to process. If there are it will succeeds and carry on, if not it fails with custom failure message",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "webhook$result*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_YourHippo_WebHook_Json_Result_File",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "No Files failure",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Does WebhookFiles Result files exists",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "No Result files to process",
							"errorCode": "404"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo/Child Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/X_PL_YourHippo_Process_WebHook_User_Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get User File List",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Does WebhookFiles User files exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_YourHippo_WebHook_Json_User_File",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Process File List",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get User File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get User File List').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Process User Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"UserID"
												]
											},
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['data']['user']['id']"
													},
													"sink": {
														"name": "UserID",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['employee_number']"
													},
													"sink": {
														"name": "EmployeeNumber",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['created_at']"
													},
													"sink": {
														"name": "CreatedDateTime",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['start_date']"
													},
													"sink": {
														"name": "StartDate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['name']"
													},
													"sink": {
														"name": "UserName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['email']"
													},
													"sink": {
														"name": "Email",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['gender']['description']"
													},
													"sink": {
														"name": "Gender",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['job_title']"
													},
													"sink": {
														"name": "JobTitle",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['role']['name']"
													},
													"sink": {
														"name": "UserRole",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['primaryEntity']['id']"
													},
													"sink": {
														"name": "PrimaryEntityID",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['status']['name']"
													},
													"sink": {
														"name": "UserStatus",
														"type": "String"
													}
												}
											],
											"collectionReference": ""
										}
									},
									"inputs": [
										{
											"referenceName": "DS_YourHippo_WebHook_Json_User_File",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_AH2_TRANSFORM_DB",
											"type": "DatasetReference",
											"parameters": {
												"Schema": "YourHippo",
												"Table": "Users"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Archive Files",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Process File List",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles', '/', 'User')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles', '/', 'Archive', '/', 'User')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Does WebhookFiles User files exists",
						"description": "Checks there are files to process. If there are it will succeeds and carry on, if not it fails with custom failure message",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "webhook$user*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_YourHippo_WebHook_Json_User_File",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "No Files failure",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Does WebhookFiles User files exists",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "No User files to process",
							"errorCode": "404"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo/Child Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/xPL_MCM_Communities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Download Community list",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_MCM_Communities",
								"type": "DatasetReference",
								"parameters": {
									"APIKey": "93ec8bc7-159f4e-1045a6-209d40-2491100be4f6e2",
									"Query": "/OrganisationApi/Communities"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_MCM_Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "MCM"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/xPL_MCM_Get_Generic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Get data from the supplied endpoint (query/report) for the supplied community ID",
				"activities": [
					{
						"name": "Download Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_MCM_Get_Generic",
								"type": "DatasetReference",
								"parameters": {
									"APIKey": "93ec8bc7-159f4e-1045a6-209d40-2491100be4f6e2",
									"Query": {
										"value": "@variables('Query')",
										"type": "Expression"
									},
									"CommunityID": {
										"value": "@variables('CommunityID')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_MCM_Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set Query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set CommunityID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Query",
							"value": "/ReportsAndChartsApi/Get/CareNotesReport"
						}
					},
					{
						"name": "Set CommunityID",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CommunityID",
							"value": "b1961c38-5b2f-4c4f-b60c-fabc3cdf7498"
						}
					},
					{
						"name": "Set Filename",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@last(split(variables('Query'), '/'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Query": {
						"type": "String"
					},
					"CommunityID": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MCM"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_CH_GRG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPrem_Coldharbour",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OnPrem"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_CH_IP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPrem_ColdHarbour_IP",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OnPrem"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_Exchequer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPrem_Exchequer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OnPrem"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AveryblobFileShare')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AveryblobFileShare_connectionString')]",
					"fileShare": "averyblobfileshare"
				},
				"connectVia": {
					"referenceName": "AveryVirtualNetworkIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AveryblobStorageAccount')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AveryblobStorageAccount_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AveryVirtualNetworkIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SoftWorks_JSON_Employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Employee_JSON",
								"type": "DatasetReference"
							},
							"name": "EmployeeJSONTable"
						},
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Clockings_JSON",
								"type": "DatasetReference"
							},
							"name": "ClockingsJSONTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Employee",
								"type": "DatasetReference"
							},
							"name": "EmployeeTable"
						},
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Clockings",
								"type": "DatasetReference"
							},
							"name": "ClockingsTable"
						}
					],
					"transformations": [
						{
							"name": "EmployeeDateConversion"
						},
						{
							"name": "EmployeeUpsertCondition",
							"description": "Upsert condition set to always be true so all fields are updated with latest values and any new records are inserted. The Key column used to check for upsert is the EmployeeNumber and is set on the sink task and "
						},
						{
							"name": "ClockingsDateConversion"
						},
						{
							"name": "ClockingsUpsertCondition"
						}
					],
					"scriptLines": [
						"source(output(",
						"          department as string,",
						"          clockNumber as string,",
						"          clocking as string,",
						"          dateOfBirth as string,",
						"          dateStarted as string,",
						"          dateTerminated as string,",
						"          firstname as string,",
						"          surname as string,",
						"          employeeName as string,",
						"          employeeNumber as string,",
						"          employeeEmail as string,",
						"          employeeStatus as string,",
						"          salary as string,",
						"          roster as string,",
						"          hourlyRate as string,",
						"          payType as string,",
						"          payNumber as string,",
						"          masterPolicy as string,",
						"          supervisorName as string,",
						"          employeeCostCentre as string,",
						"          allocationGroup as string,",
						"          shiftlessPattern as string,",
						"          defaultBalanceCategory as string,",
						"          employeeGender as string,",
						"          healthcareBankGroup as string,",
						"          healthcareBankStatus as string,",
						"          selfRosteringGroup as string,",
						"          nextofKinContact as string,",
						"          {nextofKinTel.Number} as string,",
						"          nextofKinRelationship as string,",
						"          telephoneNo as string,",
						"          username as string,",
						"          nameAsSupervisor as string,",
						"          address1 as string,",
						"          address2 as string,",
						"          address3 as string,",
						"          address4 as string,",
						"          postcode as string,",
						"          nINumber as string,",
						"          accountName as string,",
						"          sortCode as string,",
						"          accountNumber as string,",
						"          item as string,",
						"          notes as string,",
						"          documentReference as string,",
						"          documentName as string,",
						"          jobTitle as string,",
						"          sickLeaveEntitlement as string,",
						"          holidayEntitlement as string,",
						"          modeofTransport as string,",
						"          homeLegalName as string,",
						"          reviewDate as string,",
						"          isSupervisor as string,",
						"          salaried as string,",
						"          costCentre as string,",
						"          deptExportCode as string,",
						"          deptImportCode as string,",
						"          comments as string,",
						"          softworksID as string,",
						"          SourceFileName as string,",
						"          RowID as integer",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EmployeeJSONTable",
						"source(output(",
						"          empNo as string,",
						"          clockId as string,",
						"          absId as string,",
						"          deptId as string,",
						"          jobId as string,",
						"          projId as string,",
						"          absoluteClockTime as string,",
						"          clockType as string,",
						"          clocDate as string,",
						"          clockTime as string,",
						"          seconds as string,",
						"          effectiveDate as string,",
						"          clockDuration as string,",
						"          application as string,",
						"          sourceType as long,",
						"          sourceData as string,",
						"          sourceEdit as string,",
						"          sourceClockingType as string,",
						"          longitude as string,",
						"          latitude as string,",
						"          accuracy as string,",
						"          decision as string,",
						"          delCode as string,",
						"          userId as string,",
						"          dateEntered as string,",
						"          deleted as string,",
						"          duplicate as string,",
						"          ignore as string,",
						"          inOut as string,",
						"          inClocking as string,",
						"          outClocking as string,",
						"          isActive as string,",
						"          new as string,",
						"          standard as string,",
						"          overtime as string,",
						"          callIn as string,",
						"          clockFlag as string,",
						"          edited as string,",
						"          calcInsert as string,",
						"          infringe as string,",
						"          previous as string,",
						"          problem as string,",
						"          twUser as string,",
						"          shiftMove as string,",
						"          showFlags as string,",
						"          showLongFlags as string,",
						"          isOverMidnight as string,",
						"          deviceTime as long,",
						"          TimeZone as string,",
						"          TimeZoneCod as long,",
						"          PrevAbsTime as long,",
						"          ReasonId as string,",
						"          Comments as string,",
						"          ApprovalState as string,",
						"          ApprovalStateCaption as string,",
						"          PrevApprovalState as string,",
						"          LocationText as string,",
						"          LocationEditText as string,",
						"          LocationTextExtended as string,",
						"          Offline as string,",
						"          AttachedDocumentId as string,",
						"          AssumedId as string,",
						"          SourceFileName as string,",
						"          RowID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ClockingsJSONTable",
						"EmployeeJSONTable derive(dateOfBirth = substring(dateOfBirth, 5, 4) + '-' + substring(dateOfBirth, 3, 2) + '-' + substring(dateOfBirth, 1, 2),",
						"          dateStarted = case(substring(dateStarted, 5, 2) > substring(toString(year(currentUTC())), 3, 2), '19' + substring(dateStarted, 5, 2) + '-' + substring(dateStarted, 3, 2) + '-' + substring(dateStarted, 1, 2), '20' + substring(dateStarted, 5, 2) + '-' + substring(dateStarted, 3, 2) + '-' + substring(dateStarted, 1, 2)),",
						"          dateTerminated = case(dateTerminated=='301299', '2099-12-30', '20' + substring(dateTerminated, 5, 2) + '-' + substring(dateTerminated, 3, 2) + '-' + substring(dateTerminated, 1, 2)),",
						"          reviewDate = case(reviewDate == '', '1900-01-01', substring(reviewDate, 5, 4) + '-' + substring(reviewDate, 3, 2) + '-' + substring(reviewDate, 1, 2)),",
						"          RowTimeStamp = currentUTC()) ~> EmployeeDateConversion",
						"EmployeeDateConversion alterRow(upsertIf(true())) ~> EmployeeUpsertCondition",
						"ClockingsJSONTable derive(ClockDateCon = substring(clocDate, 5, 4) + '-' + substring(clocDate, 3, 2) + '-' + substring(clocDate, 1, 2),",
						"          EffectiveDateCon = substring(effectiveDate, 5, 4) + '-' + substring(effectiveDate, 3, 2) + '-' + substring(effectiveDate, 1, 2),",
						"          DateEnteredCon = substring(dateEntered, 5, 4) + '-' + substring(dateEntered, 3, 2) + '-' + substring(dateEntered, 1, 2),",
						"          ClockTimeCon = toTimestamp(clockTime, 'HH:mm')) ~> ClockingsDateConversion",
						"ClockingsDateConversion alterRow(upsertIf(true())) ~> ClockingsUpsertCondition",
						"EmployeeUpsertCondition sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Department as string,",
						"          ClockNumber as string,",
						"          Clocking as string,",
						"          DateOfBirth as date,",
						"          DateStarted as date,",
						"          DateTerminated as date,",
						"          Firstname as string,",
						"          Surname as string,",
						"          EmployeeName as string,",
						"          EmployeeNumber as string,",
						"          EmployeeEmail as string,",
						"          EmployeeStatus as string,",
						"          Salary as string,",
						"          Roster as string,",
						"          HourlyRate as decimal(8,2),",
						"          PayType as string,",
						"          PayNumber as string,",
						"          MasterPolicy as string,",
						"          SupervisorName as string,",
						"          EmployeeCostCentre as string,",
						"          AllocationGroup as string,",
						"          ShiftlessPattern as string,",
						"          DefaultBalanceCategory as string,",
						"          EmployeeGender as string,",
						"          HealthcareBankGroup as string,",
						"          HealthcareBankStatus as string,",
						"          SelfRosteringGroup as string,",
						"          NextofKinContact as string,",
						"          NextofKinTelNumber as string,",
						"          NextofKinRelationship as string,",
						"          TelephoneNo as string,",
						"          Username as string,",
						"          NameAsSupervisor as string,",
						"          Address1 as string,",
						"          Address2 as string,",
						"          Address3 as string,",
						"          Address4 as string,",
						"          Postcode as string,",
						"          NINumber as string,",
						"          AccountName as string,",
						"          SortCode as string,",
						"          AccountNumber as string,",
						"          Item as string,",
						"          Notes as string,",
						"          DocumentReference as string,",
						"          DocumentName as string,",
						"          JobTitle as string,",
						"          SickLeaveEntitlement as string,",
						"          HolidayEntitlement as string,",
						"          ModeofTransport as string,",
						"          HomeLegalName as string,",
						"          ReviewDate as date,",
						"          IsSupervisor as boolean,",
						"          Salaried as boolean,",
						"          CostCentre as string,",
						"          DeptExportCode as string,",
						"          DeptImportCode as string,",
						"          Comments as string,",
						"          SoftworksID as string,",
						"          SourceFileName as string,",
						"          RowTimeStamp as timestamp,",
						"          RowID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['EmployeeNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Department = department,",
						"          ClockNumber = clockNumber,",
						"          Clocking = clocking,",
						"          DateOfBirth = dateOfBirth,",
						"          DateStarted = dateStarted,",
						"          DateTerminated = dateTerminated,",
						"          Firstname = firstname,",
						"          Surname = surname,",
						"          EmployeeName = employeeName,",
						"          EmployeeNumber = employeeNumber,",
						"          EmployeeEmail = employeeEmail,",
						"          EmployeeStatus = employeeStatus,",
						"          Salary = salary,",
						"          Roster = roster,",
						"          HourlyRate = hourlyRate,",
						"          PayType = payType,",
						"          PayNumber = payNumber,",
						"          MasterPolicy = masterPolicy,",
						"          SupervisorName = supervisorName,",
						"          EmployeeCostCentre = employeeCostCentre,",
						"          AllocationGroup = allocationGroup,",
						"          ShiftlessPattern = shiftlessPattern,",
						"          DefaultBalanceCategory = defaultBalanceCategory,",
						"          EmployeeGender = employeeGender,",
						"          HealthcareBankGroup = healthcareBankGroup,",
						"          HealthcareBankStatus = healthcareBankStatus,",
						"          SelfRosteringGroup = selfRosteringGroup,",
						"          NextofKinContact = nextofKinContact,",
						"          NextofKinTelNumber = {nextofKinTel.Number},",
						"          NextofKinRelationship = nextofKinRelationship,",
						"          TelephoneNo = telephoneNo,",
						"          Username = username,",
						"          NameAsSupervisor = nameAsSupervisor,",
						"          Address1 = address1,",
						"          Address2 = address2,",
						"          Address3 = address3,",
						"          Address4 = address4,",
						"          Postcode = postcode,",
						"          NINumber = nINumber,",
						"          AccountName = accountName,",
						"          SortCode = sortCode,",
						"          AccountNumber = accountNumber,",
						"          Item = item,",
						"          Notes = notes,",
						"          DocumentReference = documentReference,",
						"          DocumentName = documentName,",
						"          JobTitle = jobTitle,",
						"          SickLeaveEntitlement = sickLeaveEntitlement,",
						"          HolidayEntitlement = holidayEntitlement,",
						"          ModeofTransport = modeofTransport,",
						"          HomeLegalName = homeLegalName,",
						"          ReviewDate = reviewDate,",
						"          IsSupervisor = isSupervisor,",
						"          Salaried = salaried,",
						"          CostCentre = costCentre,",
						"          DeptExportCode = deptExportCode,",
						"          DeptImportCode = deptImportCode,",
						"          Comments = comments,",
						"          SoftworksID = softworksID,",
						"          SourceFileName,",
						"          RowTimeStamp",
						"     )) ~> EmployeeTable",
						"ClockingsUpsertCondition sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpNo as integer,",
						"          ClockId as string,",
						"          AbsId as string,",
						"          DeptId as string,",
						"          JobId as string,",
						"          ProjId as string,",
						"          AbsoluteClockTime as string,",
						"          ClockType as string,",
						"          ClockDate as date,",
						"          ClockTime as timestamp,",
						"          Seconds as string,",
						"          EffectiveDate as date,",
						"          ClockDuration as string,",
						"          Application as string,",
						"          SourceType as long,",
						"          SourceData as string,",
						"          SourceEdit as string,",
						"          SourceClockingType as string,",
						"          Longitude as string,",
						"          Latitude as string,",
						"          Accuracy as string,",
						"          Decision as string,",
						"          DelCode as string,",
						"          UserId as string,",
						"          DateEntered as date,",
						"          Deleted as string,",
						"          Duplicate as string,",
						"          Ignore as string,",
						"          InOut as string,",
						"          InClocking as string,",
						"          OutClocking as string,",
						"          IsActive as string,",
						"          New as string,",
						"          Standard as string,",
						"          Overtime as string,",
						"          CallIn as string,",
						"          ClockFlag as string,",
						"          Edited as string,",
						"          CalcInsert as string,",
						"          Infringe as string,",
						"          Previous as string,",
						"          Problem as string,",
						"          TwUser as string,",
						"          ShiftMove as string,",
						"          ShowFlags as string,",
						"          ShowLongFlags as string,",
						"          IsOverMidnight as string,",
						"          DeviceTime as long,",
						"          TimeZone as string,",
						"          TimeZoneCod as long,",
						"          PrevAbsTime as long,",
						"          ReasonId as string,",
						"          Comments as string,",
						"          ApprovalState as string,",
						"          ApprovalStateCaption as string,",
						"          PrevApprovalState as string,",
						"          LocationText as string,",
						"          LocationEditText as string,",
						"          LocationTextExtended as string,",
						"          Offline as string,",
						"          AttachedDocumentId as string,",
						"          AssumedId as string,",
						"          SourceFileName as string,",
						"          RowID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['EmpNo','ClockId','AbsId','JobId','AbsoluteClockTime'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EmpNo = empNo,",
						"          ClockId = clockId,",
						"          AbsId = absId,",
						"          DeptId = deptId,",
						"          JobId = jobId,",
						"          ProjId = projId,",
						"          AbsoluteClockTime = absoluteClockTime,",
						"          ClockType = clockType,",
						"          ClockDate = ClockDateCon,",
						"          ClockTime = ClockTimeCon,",
						"          Seconds = seconds,",
						"          EffectiveDate = EffectiveDateCon,",
						"          ClockDuration = clockDuration,",
						"          Application = application,",
						"          SourceType = sourceType,",
						"          SourceData = sourceData,",
						"          SourceEdit = sourceEdit,",
						"          SourceClockingType = sourceClockingType,",
						"          Longitude = longitude,",
						"          Latitude = latitude,",
						"          Accuracy = accuracy,",
						"          Decision = decision,",
						"          DelCode = delCode,",
						"          UserId = userId,",
						"          DateEntered = DateEnteredCon,",
						"          Deleted = deleted,",
						"          Duplicate = duplicate,",
						"          Ignore = ignore,",
						"          InOut = inOut,",
						"          InClocking = inClocking,",
						"          OutClocking = outClocking,",
						"          IsActive = isActive,",
						"          New = new,",
						"          Standard = standard,",
						"          Overtime = overtime,",
						"          CallIn = callIn,",
						"          ClockFlag = clockFlag,",
						"          Edited = edited,",
						"          CalcInsert = calcInsert,",
						"          Infringe = infringe,",
						"          Previous = previous,",
						"          Problem = problem,",
						"          TwUser = twUser,",
						"          ShiftMove = shiftMove,",
						"          ShowFlags = showFlags,",
						"          ShowLongFlags = showLongFlags,",
						"          IsOverMidnight = isOverMidnight,",
						"          DeviceTime = deviceTime,",
						"          TimeZone,",
						"          TimeZoneCod,",
						"          PrevAbsTime,",
						"          ReasonId,",
						"          Comments,",
						"          ApprovalState,",
						"          ApprovalStateCaption,",
						"          PrevApprovalState,",
						"          LocationText,",
						"          LocationEditText,",
						"          LocationTextExtended,",
						"          Offline,",
						"          AttachedDocumentId,",
						"          AssumedId,",
						"          SourceFileName",
						"     )) ~> ClockingsTable"
					]
				}
			},
			"dependsOn": []
		}
	]
}