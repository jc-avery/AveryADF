{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Avery-ADF"
		},
		"AveryblobFileShare_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AveryblobFileShare'"
		},
		"AveryblobStorageAccount_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AveryblobStorageAccount'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/X_PL_YourHippo_Process_WebHook_Result_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Result File List",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Does WebhookFiles Result files exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_YourHippo_WebHook_Json_Result_File",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Process File List",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Result File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Result File List').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Process Result Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"ResultID"
												]
											},
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['data']['result']['id']"
													},
													"sink": {
														"name": "ResultID",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['passed']"
													},
													"sink": {
														"name": "Passed",
														"type": "Boolean"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['grade']"
													},
													"sink": {
														"name": "Grade",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['score']"
													},
													"sink": {
														"name": "Score",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['completed_at']"
													},
													"sink": {
														"name": "CompletedAt",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['expires_at']"
													},
													"sink": {
														"name": "ExpiresAt",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['has_expired']"
													},
													"sink": {
														"name": "HasExpired",
														"type": "Boolean"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['course']['id']"
													},
													"sink": {
														"name": "CourseID",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['data']['result']['user']['id']"
													},
													"sink": {
														"name": "UserID",
														"type": "String"
													}
												}
											],
											"collectionReference": ""
										}
									},
									"inputs": [
										{
											"referenceName": "DS_YourHippo_WebHook_Json_Result_File",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_AH2_TRANSFORM_DB",
											"type": "DatasetReference",
											"parameters": {
												"Schema": "YourHippo",
												"Table": "StageResults"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Archive Files",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Process File List",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles', '/', 'Result')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles', '/', 'Archive', '/', 'Result')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Does WebhookFiles Result files exists",
						"description": "Checks there are files to process. If there are it will succeeds and carry on, if not it fails with custom failure message",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "webhook$result*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_YourHippo_WebHook_Json_Result_File",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "No Files failure",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Does WebhookFiles Result files exists",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "No Result files to process",
							"errorCode": "404"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo/Child Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/X_PL_YourHippo_Process_WebHook_User_Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get User File List",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Does WebhookFiles User files exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_YourHippo_WebHook_Json_User_File",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Process File List",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get User File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get User File List').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Process User Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"UserID"
												]
											},
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['data']['user']['id']"
													},
													"sink": {
														"name": "UserID",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['employee_number']"
													},
													"sink": {
														"name": "EmployeeNumber",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['created_at']"
													},
													"sink": {
														"name": "CreatedDateTime",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['start_date']"
													},
													"sink": {
														"name": "StartDate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['name']"
													},
													"sink": {
														"name": "UserName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['email']"
													},
													"sink": {
														"name": "Email",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['gender']['description']"
													},
													"sink": {
														"name": "Gender",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['job_title']"
													},
													"sink": {
														"name": "JobTitle",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['role']['name']"
													},
													"sink": {
														"name": "UserRole",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['primaryEntity']['id']"
													},
													"sink": {
														"name": "PrimaryEntityID",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['user']['status']['name']"
													},
													"sink": {
														"name": "UserStatus",
														"type": "String"
													}
												}
											],
											"collectionReference": ""
										}
									},
									"inputs": [
										{
											"referenceName": "DS_YourHippo_WebHook_Json_User_File",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_AH2_TRANSFORM_DB",
											"type": "DatasetReference",
											"parameters": {
												"Schema": "YourHippo",
												"Table": "Users"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Archive Files",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Process File List",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles', '/', 'User')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_YourHippo_WebHook_Files",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat('WebhookFiles', '/', 'Archive', '/', 'User')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Does WebhookFiles User files exists",
						"description": "Checks there are files to process. If there are it will succeeds and carry on, if not it fails with custom failure message",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "webhook$user*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_YourHippo_WebHook_Json_User_File",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "No Files failure",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Does WebhookFiles User files exists",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "No User files to process",
							"errorCode": "404"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "YourHippo/Child Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/xPL_MCM_Communities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Download Community list",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_MCM_Communities",
								"type": "DatasetReference",
								"parameters": {
									"APIKey": "x",
									"Query": "/OrganisationApi/Communities"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_MCM_Json",
								"type": "DatasetReference",
								"parameters": {
									"FileType": "x"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "MCM"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/xPL_MCM_GetData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MCM Data",
						"description": "Get the MCM data via Azure function",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "www.test.co.uk"
						}
					},
					{
						"name": "AZ Func Results",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get MCM Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "MCM_Json_Data",
							"value": {
								"value": "@activity('Get MCM Data').output.response",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Write to text file",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "VariableValue",
										"value": {
											"value": "@variables('MCM_Json_Data')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "VariableValue",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_MCM_Dummy_input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_MCM_textFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Write to json file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "AZ Func Results",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "VariableValue",
										"value": {
											"value": "@json(variables('MCM_Json_Data'))",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "VariableValue",
											"type": "String"
										},
										"sink": {
											"path": "$['Column_1']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_MCM_Dummy_input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_MCM_Json",
								"type": "DatasetReference",
								"parameters": {
									"FileType": "x"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"MCM_Json_Data": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MCM"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/xPL_MCM_Get_Generic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Get data from the supplied endpoint (query/report) for the supplied community ID",
				"activities": [
					{
						"name": "Download Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_MCM_Get_Generic",
								"type": "DatasetReference",
								"parameters": {
									"APIKey": "x",
									"Query": {
										"value": "@variables('Query')",
										"type": "Expression"
									},
									"CommunityID": {
										"value": "@variables('CommunityID')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_MCM_Json",
								"type": "DatasetReference",
								"parameters": {
									"FileType": "x"
								}
							}
						]
					},
					{
						"name": "Set Query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set CommunityID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Query",
							"value": "/ReportsAndChartsApi/Get/CareNotesReport"
						}
					},
					{
						"name": "Set CommunityID",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CommunityID",
							"value": "b1961c38-5b2f-4c4f-b60c-fabc3cdf7498"
						}
					},
					{
						"name": "Set Filename",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@last(split(variables('Query'), '/'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Query": {
						"type": "String"
					},
					"CommunityID": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MCM"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_CH_GRG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPrem_Coldharbour",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OnPrem"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_CH_IP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPrem_ColdHarbour_IP",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OnPrem"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_Exchequer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPrem_Exchequer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OnPrem"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AveryblobFileShare')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AveryblobFileShare_connectionString')]",
					"fileShare": "averyblobfileshare"
				},
				"connectVia": {
					"referenceName": "AveryVirtualNetworkIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AveryblobStorageAccount')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AveryblobStorageAccount_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AveryVirtualNetworkIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SoftWorks_JSON_Employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Employee_JSON",
								"type": "DatasetReference"
							},
							"name": "EmployeeJSONTable"
						},
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Clockings_JSON",
								"type": "DatasetReference"
							},
							"name": "ClockingsJSONTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Employee",
								"type": "DatasetReference"
							},
							"name": "EmployeeTable"
						},
						{
							"dataset": {
								"referenceName": "DS_AH2_TRANSFORM_DB_SoftWorks_Clockings",
								"type": "DatasetReference"
							},
							"name": "ClockingsTable"
						}
					],
					"transformations": [
						{
							"name": "EmployeeDateConversion"
						},
						{
							"name": "EmployeeUpsertCondition",
							"description": "Upsert condition set to always be true so all fields are updated with latest values and any new records are inserted. The Key column used to check for upsert is the EmployeeNumber and is set on the sink task and "
						},
						{
							"name": "ClockingsDateConversion"
						},
						{
							"name": "ClockingsUpsertCondition"
						}
					],
					"scriptLines": [
						"source(output(",
						"          department as string,",
						"          clockNumber as string,",
						"          clocking as string,",
						"          dateOfBirth as string,",
						"          dateStarted as string,",
						"          dateTerminated as string,",
						"          firstname as string,",
						"          surname as string,",
						"          employeeName as string,",
						"          employeeNumber as string,",
						"          employeeEmail as string,",
						"          employeeStatus as string,",
						"          salary as string,",
						"          roster as string,",
						"          hourlyRate as string,",
						"          payType as string,",
						"          payNumber as string,",
						"          masterPolicy as string,",
						"          supervisorName as string,",
						"          employeeCostCentre as string,",
						"          allocationGroup as string,",
						"          shiftlessPattern as string,",
						"          defaultBalanceCategory as string,",
						"          employeeGender as string,",
						"          healthcareBankGroup as string,",
						"          healthcareBankStatus as string,",
						"          selfRosteringGroup as string,",
						"          nextofKinContact as string,",
						"          {nextofKinTel.Number} as string,",
						"          nextofKinRelationship as string,",
						"          telephoneNo as string,",
						"          username as string,",
						"          nameAsSupervisor as string,",
						"          address1 as string,",
						"          address2 as string,",
						"          address3 as string,",
						"          address4 as string,",
						"          postcode as string,",
						"          nINumber as string,",
						"          accountName as string,",
						"          sortCode as string,",
						"          accountNumber as string,",
						"          item as string,",
						"          notes as string,",
						"          documentReference as string,",
						"          documentName as string,",
						"          jobTitle as string,",
						"          sickLeaveEntitlement as string,",
						"          holidayEntitlement as string,",
						"          modeofTransport as string,",
						"          homeLegalName as string,",
						"          reviewDate as string,",
						"          isSupervisor as string,",
						"          salaried as string,",
						"          costCentre as string,",
						"          deptExportCode as string,",
						"          deptImportCode as string,",
						"          comments as string,",
						"          softworksID as string,",
						"          SourceFileName as string,",
						"          RowID as integer",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EmployeeJSONTable",
						"source(output(",
						"          empNo as string,",
						"          clockId as string,",
						"          absId as string,",
						"          deptId as string,",
						"          jobId as string,",
						"          projId as string,",
						"          absoluteClockTime as string,",
						"          clockType as string,",
						"          clocDate as string,",
						"          clockTime as string,",
						"          seconds as string,",
						"          effectiveDate as string,",
						"          clockDuration as string,",
						"          application as string,",
						"          sourceType as long,",
						"          sourceData as string,",
						"          sourceEdit as string,",
						"          sourceClockingType as string,",
						"          longitude as string,",
						"          latitude as string,",
						"          accuracy as string,",
						"          decision as string,",
						"          delCode as string,",
						"          userId as string,",
						"          dateEntered as string,",
						"          deleted as string,",
						"          duplicate as string,",
						"          ignore as string,",
						"          inOut as string,",
						"          inClocking as string,",
						"          outClocking as string,",
						"          isActive as string,",
						"          new as string,",
						"          standard as string,",
						"          overtime as string,",
						"          callIn as string,",
						"          clockFlag as string,",
						"          edited as string,",
						"          calcInsert as string,",
						"          infringe as string,",
						"          previous as string,",
						"          problem as string,",
						"          twUser as string,",
						"          shiftMove as string,",
						"          showFlags as string,",
						"          showLongFlags as string,",
						"          isOverMidnight as string,",
						"          deviceTime as long,",
						"          TimeZone as string,",
						"          TimeZoneCod as long,",
						"          PrevAbsTime as long,",
						"          ReasonId as string,",
						"          Comments as string,",
						"          ApprovalState as string,",
						"          ApprovalStateCaption as string,",
						"          PrevApprovalState as string,",
						"          LocationText as string,",
						"          LocationEditText as string,",
						"          LocationTextExtended as string,",
						"          Offline as string,",
						"          AttachedDocumentId as string,",
						"          AssumedId as string,",
						"          SourceFileName as string,",
						"          RowID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ClockingsJSONTable",
						"EmployeeJSONTable derive(dateOfBirth = substring(dateOfBirth, 5, 4) + '-' + substring(dateOfBirth, 3, 2) + '-' + substring(dateOfBirth, 1, 2),",
						"          dateStarted = case(substring(dateStarted, 5, 2) > substring(toString(year(currentUTC())), 3, 2), '19' + substring(dateStarted, 5, 2) + '-' + substring(dateStarted, 3, 2) + '-' + substring(dateStarted, 1, 2), '20' + substring(dateStarted, 5, 2) + '-' + substring(dateStarted, 3, 2) + '-' + substring(dateStarted, 1, 2)),",
						"          dateTerminated = case(dateTerminated=='301299', '2099-12-30', '20' + substring(dateTerminated, 5, 2) + '-' + substring(dateTerminated, 3, 2) + '-' + substring(dateTerminated, 1, 2)),",
						"          reviewDate = case(reviewDate == '', '1900-01-01', substring(reviewDate, 5, 4) + '-' + substring(reviewDate, 3, 2) + '-' + substring(reviewDate, 1, 2)),",
						"          RowTimeStamp = currentUTC()) ~> EmployeeDateConversion",
						"EmployeeDateConversion alterRow(upsertIf(true())) ~> EmployeeUpsertCondition",
						"ClockingsJSONTable derive(ClockDateCon = substring(clocDate, 5, 4) + '-' + substring(clocDate, 3, 2) + '-' + substring(clocDate, 1, 2),",
						"          EffectiveDateCon = substring(effectiveDate, 5, 4) + '-' + substring(effectiveDate, 3, 2) + '-' + substring(effectiveDate, 1, 2),",
						"          DateEnteredCon = substring(dateEntered, 5, 4) + '-' + substring(dateEntered, 3, 2) + '-' + substring(dateEntered, 1, 2),",
						"          ClockTimeCon = toTimestamp(clockTime, 'HH:mm')) ~> ClockingsDateConversion",
						"ClockingsDateConversion alterRow(upsertIf(true())) ~> ClockingsUpsertCondition",
						"EmployeeUpsertCondition sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Department as string,",
						"          ClockNumber as string,",
						"          Clocking as string,",
						"          DateOfBirth as date,",
						"          DateStarted as date,",
						"          DateTerminated as date,",
						"          Firstname as string,",
						"          Surname as string,",
						"          EmployeeName as string,",
						"          EmployeeNumber as string,",
						"          EmployeeEmail as string,",
						"          EmployeeStatus as string,",
						"          Salary as string,",
						"          Roster as string,",
						"          HourlyRate as decimal(8,2),",
						"          PayType as string,",
						"          PayNumber as string,",
						"          MasterPolicy as string,",
						"          SupervisorName as string,",
						"          EmployeeCostCentre as string,",
						"          AllocationGroup as string,",
						"          ShiftlessPattern as string,",
						"          DefaultBalanceCategory as string,",
						"          EmployeeGender as string,",
						"          HealthcareBankGroup as string,",
						"          HealthcareBankStatus as string,",
						"          SelfRosteringGroup as string,",
						"          NextofKinContact as string,",
						"          NextofKinTelNumber as string,",
						"          NextofKinRelationship as string,",
						"          TelephoneNo as string,",
						"          Username as string,",
						"          NameAsSupervisor as string,",
						"          Address1 as string,",
						"          Address2 as string,",
						"          Address3 as string,",
						"          Address4 as string,",
						"          Postcode as string,",
						"          NINumber as string,",
						"          AccountName as string,",
						"          SortCode as string,",
						"          AccountNumber as string,",
						"          Item as string,",
						"          Notes as string,",
						"          DocumentReference as string,",
						"          DocumentName as string,",
						"          JobTitle as string,",
						"          SickLeaveEntitlement as string,",
						"          HolidayEntitlement as string,",
						"          ModeofTransport as string,",
						"          HomeLegalName as string,",
						"          ReviewDate as date,",
						"          IsSupervisor as boolean,",
						"          Salaried as boolean,",
						"          CostCentre as string,",
						"          DeptExportCode as string,",
						"          DeptImportCode as string,",
						"          Comments as string,",
						"          SoftworksID as string,",
						"          SourceFileName as string,",
						"          RowTimeStamp as timestamp,",
						"          RowID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['EmployeeNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Department = department,",
						"          ClockNumber = clockNumber,",
						"          Clocking = clocking,",
						"          DateOfBirth = dateOfBirth,",
						"          DateStarted = dateStarted,",
						"          DateTerminated = dateTerminated,",
						"          Firstname = firstname,",
						"          Surname = surname,",
						"          EmployeeName = employeeName,",
						"          EmployeeNumber = employeeNumber,",
						"          EmployeeEmail = employeeEmail,",
						"          EmployeeStatus = employeeStatus,",
						"          Salary = salary,",
						"          Roster = roster,",
						"          HourlyRate = hourlyRate,",
						"          PayType = payType,",
						"          PayNumber = payNumber,",
						"          MasterPolicy = masterPolicy,",
						"          SupervisorName = supervisorName,",
						"          EmployeeCostCentre = employeeCostCentre,",
						"          AllocationGroup = allocationGroup,",
						"          ShiftlessPattern = shiftlessPattern,",
						"          DefaultBalanceCategory = defaultBalanceCategory,",
						"          EmployeeGender = employeeGender,",
						"          HealthcareBankGroup = healthcareBankGroup,",
						"          HealthcareBankStatus = healthcareBankStatus,",
						"          SelfRosteringGroup = selfRosteringGroup,",
						"          NextofKinContact = nextofKinContact,",
						"          NextofKinTelNumber = {nextofKinTel.Number},",
						"          NextofKinRelationship = nextofKinRelationship,",
						"          TelephoneNo = telephoneNo,",
						"          Username = username,",
						"          NameAsSupervisor = nameAsSupervisor,",
						"          Address1 = address1,",
						"          Address2 = address2,",
						"          Address3 = address3,",
						"          Address4 = address4,",
						"          Postcode = postcode,",
						"          NINumber = nINumber,",
						"          AccountName = accountName,",
						"          SortCode = sortCode,",
						"          AccountNumber = accountNumber,",
						"          Item = item,",
						"          Notes = notes,",
						"          DocumentReference = documentReference,",
						"          DocumentName = documentName,",
						"          JobTitle = jobTitle,",
						"          SickLeaveEntitlement = sickLeaveEntitlement,",
						"          HolidayEntitlement = holidayEntitlement,",
						"          ModeofTransport = modeofTransport,",
						"          HomeLegalName = homeLegalName,",
						"          ReviewDate = reviewDate,",
						"          IsSupervisor = isSupervisor,",
						"          Salaried = salaried,",
						"          CostCentre = costCentre,",
						"          DeptExportCode = deptExportCode,",
						"          DeptImportCode = deptImportCode,",
						"          Comments = comments,",
						"          SoftworksID = softworksID,",
						"          SourceFileName,",
						"          RowTimeStamp",
						"     )) ~> EmployeeTable",
						"ClockingsUpsertCondition sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpNo as integer,",
						"          ClockId as string,",
						"          AbsId as string,",
						"          DeptId as string,",
						"          JobId as string,",
						"          ProjId as string,",
						"          AbsoluteClockTime as string,",
						"          ClockType as string,",
						"          ClockDate as date,",
						"          ClockTime as timestamp,",
						"          Seconds as string,",
						"          EffectiveDate as date,",
						"          ClockDuration as string,",
						"          Application as string,",
						"          SourceType as long,",
						"          SourceData as string,",
						"          SourceEdit as string,",
						"          SourceClockingType as string,",
						"          Longitude as string,",
						"          Latitude as string,",
						"          Accuracy as string,",
						"          Decision as string,",
						"          DelCode as string,",
						"          UserId as string,",
						"          DateEntered as date,",
						"          Deleted as string,",
						"          Duplicate as string,",
						"          Ignore as string,",
						"          InOut as string,",
						"          InClocking as string,",
						"          OutClocking as string,",
						"          IsActive as string,",
						"          New as string,",
						"          Standard as string,",
						"          Overtime as string,",
						"          CallIn as string,",
						"          ClockFlag as string,",
						"          Edited as string,",
						"          CalcInsert as string,",
						"          Infringe as string,",
						"          Previous as string,",
						"          Problem as string,",
						"          TwUser as string,",
						"          ShiftMove as string,",
						"          ShowFlags as string,",
						"          ShowLongFlags as string,",
						"          IsOverMidnight as string,",
						"          DeviceTime as long,",
						"          TimeZone as string,",
						"          TimeZoneCod as long,",
						"          PrevAbsTime as long,",
						"          ReasonId as string,",
						"          Comments as string,",
						"          ApprovalState as string,",
						"          ApprovalStateCaption as string,",
						"          PrevApprovalState as string,",
						"          LocationText as string,",
						"          LocationEditText as string,",
						"          LocationTextExtended as string,",
						"          Offline as string,",
						"          AttachedDocumentId as string,",
						"          AssumedId as string,",
						"          SourceFileName as string,",
						"          RowID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['EmpNo','ClockId','AbsId','JobId','AbsoluteClockTime'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EmpNo = empNo,",
						"          ClockId = clockId,",
						"          AbsId = absId,",
						"          DeptId = deptId,",
						"          JobId = jobId,",
						"          ProjId = projId,",
						"          AbsoluteClockTime = absoluteClockTime,",
						"          ClockType = clockType,",
						"          ClockDate = ClockDateCon,",
						"          ClockTime = ClockTimeCon,",
						"          Seconds = seconds,",
						"          EffectiveDate = EffectiveDateCon,",
						"          ClockDuration = clockDuration,",
						"          Application = application,",
						"          SourceType = sourceType,",
						"          SourceData = sourceData,",
						"          SourceEdit = sourceEdit,",
						"          SourceClockingType = sourceClockingType,",
						"          Longitude = longitude,",
						"          Latitude = latitude,",
						"          Accuracy = accuracy,",
						"          Decision = decision,",
						"          DelCode = delCode,",
						"          UserId = userId,",
						"          DateEntered = DateEnteredCon,",
						"          Deleted = deleted,",
						"          Duplicate = duplicate,",
						"          Ignore = ignore,",
						"          InOut = inOut,",
						"          InClocking = inClocking,",
						"          OutClocking = outClocking,",
						"          IsActive = isActive,",
						"          New = new,",
						"          Standard = standard,",
						"          Overtime = overtime,",
						"          CallIn = callIn,",
						"          ClockFlag = clockFlag,",
						"          Edited = edited,",
						"          CalcInsert = calcInsert,",
						"          Infringe = infringe,",
						"          Previous = previous,",
						"          Problem = problem,",
						"          TwUser = twUser,",
						"          ShiftMove = shiftMove,",
						"          ShowFlags = showFlags,",
						"          ShowLongFlags = showLongFlags,",
						"          IsOverMidnight = isOverMidnight,",
						"          DeviceTime = deviceTime,",
						"          TimeZone,",
						"          TimeZoneCod,",
						"          PrevAbsTime,",
						"          ReasonId,",
						"          Comments,",
						"          ApprovalState,",
						"          ApprovalStateCaption,",
						"          PrevApprovalState,",
						"          LocationText,",
						"          LocationEditText,",
						"          LocationTextExtended,",
						"          Offline,",
						"          AttachedDocumentId,",
						"          AssumedId,",
						"          SourceFileName",
						"     )) ~> ClockingsTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_AEMS_Export')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Remove CR and LF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_AEMS_Enquiries_Export",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_AEMS_Export_PBData",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Remove CR and LF",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[AEMS].[Enquiries$RemoveHiddenCharacters]"
						},
						"linkedServiceName": {
							"referenceName": "AH2_TRANSFORM_DB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "AEMS"
				},
				"annotations": [],
				"lastPublishTime": "2024-04-29T16:06:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Artisan')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline to move Artisan Data to the Artisan SQL Server",
				"activities": [
					{
						"name": "Home Details",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_Homes",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "AEMS Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Home Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_AEMS_Enquiries",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Occupancy Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "AEMS Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_Occupancy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Artisan Debt",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Occupancy Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_Debt",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Artisan budget",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Artisan Debt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_budget",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Artisan HomeDetails",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Artisan budget",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_vHomeDetails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Artisan RLS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Artisan HomeDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Artisan_vRLS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Artisan"
				},
				"annotations": [],
				"lastPublishTime": "2024-07-02T10:33:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Bill_Profile_With_FundSource')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Export Profile and Fundsource",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT\r\n\tP.PRO_CODE AS profile_code\r\n\t,P.PRODESC AS profile_description\r\n\t,CONTACT.CONTACT_REF AS oCnta_Det_Ref\r\n\t,CONCAT(RTRIM(CONTACT.FORENAMES), RTRIM(CONTACT.SURNAME)) AS FundSourceName\t\r\nFROM \r\n\tFUNDSRC_HD AS ACC\r\n\r\n\tLEFT JOIN PROFILES AS P\r\n\t\tON P.PRO_REF = ACC.PRO_REF\r\n\r\n\tLEFT JOIN CONTACT_HD AS CONTACT\r\n\t\tON CONTACT.CONTACT_REF = ACC.CNTA_DET_REF\r\n\r\n\tLEFT JOIN CALENDAR_HD AS CALENDAR\r\n\t\tON CALENDAR.CAL_REF = ACC.CAL_REF\r\n\t\t\r\n\tLEFT JOIN RESIDENT AS R\r\n\t\tON R.RES_REF = ACC.RES_REF\r\n\r\n\tLEFT JOIN Room_Dt AS Rooms\r\n\t\tON Rooms.Room_Ref = R.Room_Ref\r\nWHERE\r\n\tP.FSTYPE = 401\r\n\t--AND R.STATUS IN (25028, 25029)\r\n\tAND Rooms.LOC_REF IN (\r\n\t\t112,\r\n\t\t113,\r\n\t\t114,\r\n\t\t115,\r\n\t\t117,\r\n\t\t122,\r\n\t\t123,\r\n\t\t124,\r\n\t\t125,\r\n\t\t134,\r\n\t\t138,\r\n\t\t139,\r\n\t\t140,\r\n\t\t141,\r\n\t\t142,\r\n\t\t145,\r\n\t\t146,\r\n\t\t147,\r\n\t\t148,\r\n\t\t149,\r\n\t\t150,\r\n\t\t151,\r\n\t\t152,\r\n\t\t153,\r\n\t\t154,\r\n\t\t155,\r\n\t\t156,\r\n\t\t157,\r\n\t\t158,\r\n\t\t159,\r\n\t\t160,\r\n\t\t161,\r\n\t\t162,\r\n\t\t163,\r\n\t\t164,\r\n\t\t165,\r\n\t\t166,\r\n\t\t167,\r\n\t\t168,\r\n\t\t169,\r\n\t\t170,\r\n\t\t171,\r\n\t\t172,\r\n\t\t173,\r\n\t\t180,\r\n\t\t181\r\n\t\t)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_OnPrem_CH_IP",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('LA Billing Profiles and FundSource - ', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Yardi/CHIP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_CH_IP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Broadshield_Download_Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Downloads data from Broadshields API each evening @ 11:45",
				"activities": [
					{
						"name": "Download Users",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BroadShield_Users",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Download Courses",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Download Users",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BroadShield_Courses",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Download UserCourses",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Download Courses",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BroadShield_UserCourses",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Broadshield"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-03T15:41:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Broadshield_Process_Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Uses the daily Json files from Broadshield API to update the Current table with an Upsert operation. And add new/updated records to the History tables.",
				"activities": [
					{
						"name": "Update Current data",
						"description": "Upserts data from the JSON files to the current tables",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BroadShield_JSON_SQL_Current",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Create History records",
						"description": "Inserts any new or updated records into the history tables.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update Current data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BroadShield_JSON_SQL_History",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Broadshield"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-08T10:01:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CH_Allocation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Transfers the allocation data from CH to Transform_DB",
				"activities": [
					{
						"name": "Copy Data to STG",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\r\n\tAllocations.[AL_DET_REF]\r\n\t,Allocations.[AL_ACCOUNT] AS AccNo\r\n\t,Allocations.[AL_CREDATT] AS CreatedAt\r\n\t,Allocations.[AL_DATE] AS TransactionDate\r\n\t,Allocations.[AL_PAYDAY] AS DateAllocated\r\n\t,Allocations.[AL_PAYIND]\r\n\t,Allocations.[AL_POSTREF] AS POST_REF\r\n\t,Allocations.[AL_REF1] AS Reference1\r\n\t,Allocations.[AL_REF2] AS Reference2\r\n\t,Allocations.[AL_TYPE] \r\n\t,CASE \r\n\t\tWHEN Allocations.[AL_TYPE] = 'A' THEN 'Adjustment - System'\r\n\t\tWHEN Allocations.[AL_TYPE] = 'C' THEN 'Credit'\r\n\t\tWHEN Allocations.[AL_TYPE] = 'I' THEN 'Invoice'\r\n\t\tWHEN Allocations.[AL_TYPE] = 'J' THEN 'Adjustment - User'\r\n\t\tWHEN Allocations.[AL_TYPE] = 'R' THEN 'Receipt'\r\n\t\tWHEN Allocations.[AL_TYPE] = 'N' THEN 'Adjustment - System'\r\n\t\tELSE ''\r\n\tEND AS TransactionType\r\n\t,Allocations.[AL_VAL] AS AllocationValue\r\n\t,Allocations.[MEMO] AS AllocationMemo\r\nFROM \r\n\tInvAlloc AS Allocations WITH (NOLOCK)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE ColdHarbour.STGAllocations",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AL_DET_REF",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "AL_DET_REF",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "AccNo",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "AccNo",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedAt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedAt",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "TransactionDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "TransactionDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "DateAllocated",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "DateAllocated",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "AL_PAYIND",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "AL_PAYIND",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "POST_REF",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "POST_REF",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "AL_TYPE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "AL_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reference1",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "Reference1",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reference2",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "Reference2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TransactionType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TransactionType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AllocationValue",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 9,
											"precision": 19
										},
										"sink": {
											"name": "AllocationValue",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 9,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "AllocationMemo",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "AllocationMemo",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_OnPrem_CH_IP",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "ColdHarbour",
									"Table": "STGAllocations"
								}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Copy Data to STG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					},
					{
						"name": "Upsert",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"AL_DET_REF"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AL_DET_REF",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "AL_DET_REF",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "AccNo",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "AccNo",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedAt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedAt",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "TransactionDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "TransactionDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "DateAllocated",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DateAllocated",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "AL_PAYIND",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "AL_PAYIND",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "POST_REF",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "POST_REF",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Reference1",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reference1",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reference2",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reference2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AL_TYPE",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "AL_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TransactionType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TransactionType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AllocationValue",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 9,
											"precision": 19
										},
										"sink": {
											"name": "AllocationValue",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 9,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "AllocationMemo",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "AllocationMemo",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "ColdHarbour",
									"Table": "STGAllocations"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "ColdHarbour",
									"Table": "Allocations"
								}
							}
						]
					},
					{
						"name": "Clear STG table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Upsert",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AH2_TRANSFORM_DB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE ColdHarbour.STGAllocations"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Cold Harbour/Children Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_CH_IP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CH_AnalysisCodes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UPSERT Analysis Codes",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\t \r\n\tNominal_Code.AltAccount AS AnalysisCode, \r\n\tNominal_Code.Description AS AnalysisDescription, \r\n\tNominal_Code.Account\r\nFROM\t\t \r\n\tNominal_Code (NOLOCK) \r\nWHERE\t \r\n\tNominal_Code.RecType = 'Elephant' \r\n\tAND Nominal_Code.UseFlag <> 'X' \r\n\tAND Nominal_Code.AltAccount != ''\r\n\tAND (SiteFilter = 0 OR Noml_Ref IN (SELECT LinkKey FROM Site_Join (NOLOCK) WHERE upper(LinkTable) = 'NOMINAL_CODE' AND Site_Ref = 151)) ORDER BY Nominal_Code.Account",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"AnalysisCode"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AnalysisCode",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "AnalysisCode",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "AnalysisDescription",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "AnalysisDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Account",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "Account",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_OnPrem_CH_IP",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "ColdHarbour",
									"Table": "AnalysisCodes"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Cold Harbour/Children Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_CH_IP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CH_Billing_Profiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Extract Local Auth Profiles",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Clear LocalAuthProfiles Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \r\n    Site.SiteId\r\n\t,Site.SiteName\r\n\t,Profiles.Pro_code AS profile_code\r\n    ,Profiles.Prodesc AS profile_description\r\n    ,Chsysdec.Description AS account_type\r\n    ,Profiles.Pro_ref\r\n    ,Profiles.Billdays AS bill_days_or_nights\r\n    ,Profiles.Billdeath AS bill_day_of_death\r\n    ,Profiles.Billdod AS bill_day_of_discharge\r\n    ,Profiles.Billdoa AS bill_day_of_admission\r\n    ,Profiles.Invprint\r\n    ,Profiles.Invdoc\r\n    ,Profiles.Soflag AS standing_order\r\n    ,Profiles.Noticeper AS notice_period\r\n    ,Profiles.Nperanal AS notice_period_analysis_code\r\n    ,Profiles.Npervatr AS notice_period_vat_code\r\n    ,Profiles.Defrate AS default_charge_rate\r\n    ,Profiles.Chgper AS charge_period\r\n    ,Profiles.Feesanal AS analysis_code\r\n    ,Profiles.Feesdesc AS fees_description\r\n    ,Profiles.FeesVatC AS vat_code\r\n    ,Profiles.BillAbs AS bill_while_temp_absent\r\n    ,Profiles.Autocredit AS automatic_credit\r\n    ,Profiles.PenBooks AS attach_pension_books\r\n    ,Profiles.UserMemo\r\n    ,Profiles.NoInvDec\r\n    ,Profiles.sg_BankAcc\r\n    ,Profiles.UseFlag\r\n    ,Profiles.OOSExtraContrib\r\n\r\nFROM \r\n\tProfiles (NOLOCK)\r\n\r\n    JOIN Chsysdec (NOLOCK) -- Lookup table for values?\r\n        ON Chsysdec.Decode_Ref = Profiles.FsType\r\n\r\n    JOIN Site (NOLOCK)\r\n        ON Site.Site_Ref IN (\r\n                                SELECT Site_Ref\r\n                                FROM Site_Join (NOLOCK)\r\n                                WHERE Site_Join.LinkKey = Profiles.Pro_Ref\r\n                                      AND upper(Site_Join.LinkTable) = 'PROFILES'\r\n                            )\r\n           OR Profiles.SiteFilter = 0\r\nWHERE \r\n\tProfiles.FSTYPE = 401 --Local Auth\r\n\t--AND Site.SITEID IN (\r\n\t--071,\r\n--072,\r\n--073,\r\n--074,\r\n--075,\r\n--078,\r\n--079,\r\n--086,\r\n--089,\r\n--088,\r\n--091,\r\n--092,\r\n--090,\r\n--095,\r\n--096,\r\n--097,\r\n--098,\r\n--099,\r\n--100,\r\n--101,\r\n--102,\r\n--103,\r\n--104,\r\n--105,\r\n--106,\r\n--107,\r\n--108,\r\n--109,\r\n--110,\r\n--111,\r\n--112,\r\n--113,\r\n--114,\r\n--115,\r\n--116,\r\n--117,\r\n--118,\r\n--119,\r\n--120,\r\n--121,\r\n--122,\r\n--123,\r\n--127,\r\n--128\r\n--)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_OnPrem_CH_IP",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_YardiStage",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "dbo",
									"Table": "LocalAuthProfiles"
								}
							}
						]
					},
					{
						"name": "Export to CSV file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Extract Local Auth Profiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n    H.Home_Ref\n    --,P.SiteId\n    ,SiteName\n    ,profile_code\n    ,profile_description\n    ,account_type\n    ,Pro_ref\n    ,bill_days_or_nights\n    ,bill_day_of_death\n    ,bill_day_of_discharge\n    ,bill_day_of_admission\n    --,Invprint\n    --,Invdoc\n    ,standing_order\n    ,notice_period\n    ,notice_period_analysis_code\n    ,notice_period_vat_code\n    ,default_charge_rate\n    ,charge_period\n    ,analysis_code\n    ,fees_description\n    ,vat_code\n    ,bill_while_temp_absent\n    ,automatic_credit\n    ,attach_pension_books\n    --,UserMemo\n    --,NoInvDec\n    ,sg_BankAcc\n    --,UseFlag\n    --,OOSExtraContrib\nFROM \n    dbo.LocalAuthProfiles AS P\n\n    LEFT JOIN ColdHarbourHomeID AS H\n        ON H.SITEID = P.SiteId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH2_YardiStage",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Yardi_CSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@concat('LA Billing Profiles - ', utcNow('yyyy-MM-dd'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Clear LocalAuthProfiles Table",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AH2_YardiStage",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE dbo.LocalAuthProfiles"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Yardi/CHIP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_CH_IP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CH_DirectDebitData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Direct Debit to Stage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\n\tDIRECTD_DT.DDDT_REF,\n\tDirectD_Hd.DDHD_REF,\n\tFundSrc_Hd.AccNo,\n    Resident.Res_Code,\n\tDirectD_DT.INVOICE_NO AS InvoiceNo,\n    DirectD_Dt.DDTranType AS DDTypeID,\n\tCASE \n\t\tWHEN DirectD_Dt.DDTranType = 1 THEN 'New DD'\n\t\tWHEN DirectD_Dt.DDTranType = 17 THEN 'Standard DD'\n\t\tWHEN DirectD_Dt.DDTranType = 18 THEN 'Cancel DD'\n\t\tWHEN DirectD_Dt.DDTranType = 19 THEN 'Change of value'\n\t\tELSE ''\n\tEND AS DDTranType,\n    DirectD_Dt.Amount AS DDAmount,\n    isnull(DirectD_Dt.Due_Date, DirectD_Dt.Inv_Date) AS DueDate,\n    DirectD_Dt.Submitted AS SubmittedDate,\n    DirectD_Dt.Allocated AS AllocationStatus,\n    DirectD_Hd.BatchNo,\n\tS.SITEID\nFROM \n\tDirectD_Dt (NOLOCK)\n    \n    JOIN DirectD_Hd (NOLOCK)\n        ON DirectD_Hd.DDHd_Ref = DirectD_Dt.DDHd_Ref\n\n    JOIN FundSrc_Hd (NOLOCK)\n\t\tON FundSrc_Hd.FS_Ref = DirectD_Dt.FS_Ref\n\n\tJOIN Resident (NOLOCK)\n\t\tON Resident.Res_Ref = FundSrc_Hd.Res_Ref\n\t\t\n\tJOIN Site AS S(NOLOCK)\n        ON S.Site_Ref = DIRECTD_HD.Site_Ref   ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE ColdHarbour.STGDirectDebits",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DDDT_REF",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DDDT_REF",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "DDHD_REF",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DDHD_REF",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "AccNo",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "AccNo",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Res_Code",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "RES_CODE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "InvoiceNo",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "InvoiceNo",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DDTypeID",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DDTypeID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "DDTranType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DDTranType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DDAmount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 9,
											"precision": 19
										},
										"sink": {
											"name": "DDAmount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 9,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "DueDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "DueDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "SubmittedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "SubmittedDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "AllocationStatus",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "AllocationStatus",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BatchNo",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "BatchNo",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SITEID",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "SITEID",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_OnPrem_CH_IP",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "ColdHarbour",
									"Table": "STGDirectDebits"
								}
							}
						]
					},
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Direct Debit to Stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT\n    DD.[SITEID]\n    ,H.HOME_REF\n    ,H.HomeName\n    ,DD.DDDT_REF\n    ,DD.[DDHD_REF]\n    ,DD.[AccNo]\n    ,DD.[RES_CODE]\n    ,DD.[InvoiceNo]\n    ,DD.[DDTypeID]\n    ,DD.[DDTranType]\n    ,DD.[DDAmount]\n    ,DD.[DueDate]\n    ,DD.[SubmittedDate]\n    ,DD.[AllocationStatus]\n    ,DD.[BatchNo]\nFROM \n    ColdHarbour.STGDirectDebits AS DD\n\n    LEFT JOIN GRG.HOME AS H\n        ON H.SiteID = DD.SiteID",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"DDDT_REF"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "n/a",
									"Table": "n/a"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AH2_TRANSFORM_DB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "ColdHarbour",
									"Table": "DirectDebits"
								}
							}
						]
					},
					{
						"name": "Clear Stage Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AH2_TRANSFORM_DB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE ColdHarbour.STGDirectDebits"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Cold Harbour/Children Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_CH_IP')]"
			]
		}
	]
}